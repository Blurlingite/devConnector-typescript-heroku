{"ast":null,"code":"import _objectSpread from \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/auth/Register.js\";\nimport React, { Fragment, useState } from \"react\";\nimport axios from \"axios\";\n\nconst Register = () => {\n  // \"formData\" will be the state for form elements\n  // need a state for form elements b/c those fields could change\n  // anything that can change or is dynamic needs a state\n  // \"setFormData\" is like this.setState (where you can change values, change the state)\n  const _useState = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\" // password2 is used when the user must re-enter their password to confirm\n\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        formData = _useState2[0],\n        setFormData = _useState2[1]; // pull out these things from formData so you don't need to keep doing formData.name, etc.\n\n\n  const name = formData.name,\n        email = formData.email,\n        password = formData.password,\n        password2 = formData.password2; // ...formData makes a copy of formData (it is the spread operator)\n  // we pass in name b/c thats what we want to change\n  // \"e.target.value\" gets the value of the input (which we labeled with \"e\" when we did this : onChange={e => onChange(e)} in the form)\n  //\"[e.target.name]\" will get replaced with whatever is assigned to the name attribute in a form element. So if we have name=\"email\" it will be replaced with \"email\" This is so we can use the onChange() function with any of our form elements\n  // So that means \"e\" is the element. \"target\" lets us target the element and then we can access the name of the element (of any attribute assigned to the element) with .NAMEOFATTRIBUTE (.name in this case)\n\n  const onChange = e => setFormData(_objectSpread({}, formData, {\n    [e.target.name]: e.target.value\n  })); // this will run when the form is submitted\n  // need async b/c this is asynchronous\n\n\n  const onSubmit = async e => {\n    e.preventDefault(); // if the passwords don't match tell the user they don't match\n    // else show the form data using formData\n\n    if (password !== password2) {\n      console.log(\"Passwords do not match\");\n    } else {\n      // create a new User object\n      const newUser = {\n        name,\n        email,\n        password\n      };\n\n      try {\n        // since we are sending data, we want to create a config object\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        }; // create the body\n\n        const body = JSON.stringify(newUser); // create the response\n        // await will wait until something (a promise) is resolved, which is why in a response, we use await. A response has to wait for everything to resolve so it can reply with a response\n        // axios returns a promise\n        // in users.js when we register a user, we use the URL \"/api/users\" so we have to use that same URL here in axios' post() function\n        // the 2nd param is the body which has all the data\n        // the 3rd param is the config, which has the headers\n\n        const res = await axios.post(\"/api/users\", body, config); // res.data should be the json webtoken that you get when registering a user\n\n        console.log(res.data);\n      } catch (err) {}\n    }\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Sign Up\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), \" Create Your Account\"), React.createElement(\"form\", {\n    className: \"form\",\n    onSubmit: e => onSubmit(e),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Name\",\n    name: \"name\",\n    value: name // This will use the function in \"const onChange\". We call it with onChange() and pass in e\n    ,\n    onChange: e => onChange(e),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"email\",\n    placeholder: \"Email Address\",\n    name: \"email\",\n    value: email // This will use the function in \"const onChange\". We call it with onChange() and pass in e\n    ,\n    onChange: e => onChange(e),\n    required: true // used to display a message when user does not enter one\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"small\", {\n    className: \"form-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"This site uses Gravatar so if you want a profile image, use a Gravatar email\")), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"Password\",\n    name: \"password\",\n    value: password // This will use the function in \"const onChange\". We call it with onChange() and pass in e\n    ,\n    onChange: e => onChange(e),\n    minLength: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"Confirm Password\",\n    name: \"password2\",\n    value: password2 // This will use the function in \"const onChange\". We call it with onChange() and pass in e\n    ,\n    onChange: e => onChange(e),\n    minLength: \"6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })), React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-primary\",\n    value: \"Register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    className: \"my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Already have an account? \", React.createElement(\"a\", {\n    href: \"login.html\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"Sign In\")));\n};\n\nexport default Register;","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/auth/Register.js"],"names":["React","Fragment","useState","axios","Register","name","email","password","password2","formData","setFormData","onChange","e","target","value","onSubmit","preventDefault","console","log","newUser","config","headers","body","JSON","stringify","res","post","data","err"],"mappings":"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","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport axios from \"axios\";\nconst Register = () => {\n  // \"formData\" will be the state for form elements\n  // need a state for form elements b/c those fields could change\n  // anything that can change or is dynamic needs a state\n  // \"setFormData\" is like this.setState (where you can change values, change the state)\n  // useState() will hold the default values\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    password2: \"\"\n    // password2 is used when the user must re-enter their password to confirm\n  });\n\n  // pull out these things from formData so you don't need to keep doing formData.name, etc.\n  const { name, email, password, password2 } = formData;\n\n  // ...formData makes a copy of formData (it is the spread operator)\n  // we pass in name b/c thats what we want to change\n  // \"e.target.value\" gets the value of the input (which we labeled with \"e\" when we did this : onChange={e => onChange(e)} in the form)\n  //\"[e.target.name]\" will get replaced with whatever is assigned to the name attribute in a form element. So if we have name=\"email\" it will be replaced with \"email\" This is so we can use the onChange() function with any of our form elements\n  // So that means \"e\" is the element. \"target\" lets us target the element and then we can access the name of the element (of any attribute assigned to the element) with .NAMEOFATTRIBUTE (.name in this case)\n  const onChange = e =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  // this will run when the form is submitted\n  // need async b/c this is asynchronous\n  const onSubmit = async e => {\n    e.preventDefault();\n    // if the passwords don't match tell the user they don't match\n    // else show the form data using formData\n    if (password !== password2) {\n      console.log(\"Passwords do not match\");\n    } else {\n      // create a new User object\n      const newUser = { name, email, password };\n\n      try {\n        // since we are sending data, we want to create a config object\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        };\n\n        // create the body\n        const body = JSON.stringify(newUser);\n\n        // create the response\n        // await will wait until something (a promise) is resolved, which is why in a response, we use await. A response has to wait for everything to resolve so it can reply with a response\n        // axios returns a promise\n        // in users.js when we register a user, we use the URL \"/api/users\" so we have to use that same URL here in axios' post() function\n        // the 2nd param is the body which has all the data\n        // the 3rd param is the config, which has the headers\n        const res = await axios.post(\"/api/users\", body, config);\n\n        // res.data should be the json webtoken that you get when registering a user\n        console.log(res.data);\n      } catch (err) {}\n    }\n  };\n  return (\n    <Fragment>\n      <h1 className=\"large text-primary\">Sign Up</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-user\" /> Create Your Account\n      </p>\n      {/* This form will call the function onSubmit() above when submitted\n      \"e\" is now the action of submission */}\n      <form className=\"form\" onSubmit={e => onSubmit(e)}>\n        <div className=\"form-group\">\n          {/* The \"value\" gets the name from our state  */}\n          <input\n            type=\"text\"\n            placeholder=\"Name\"\n            name=\"name\"\n            value={name}\n            // This will use the function in \"const onChange\". We call it with onChange() and pass in e\n            onChange={e => onChange(e)}\n            required\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"email\"\n            placeholder=\"Email Address\"\n            name=\"email\"\n            value={email}\n            // This will use the function in \"const onChange\". We call it with onChange() and pass in e\n            onChange={e => onChange(e)}\n            required // used to display a message when user does not enter one\n          />\n          <small className=\"form-text\">\n            This site uses Gravatar so if you want a profile image, use a\n            Gravatar email\n          </small>\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            value={password}\n            // This will use the function in \"const onChange\". We call it with onChange() and pass in e\n            onChange={e => onChange(e)}\n            minLength=\"6\"\n          />\n        </div>\n        <div className=\"form-group\">\n          <input\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            value={password2}\n            // This will use the function in \"const onChange\". We call it with onChange() and pass in e\n            onChange={e => onChange(e)}\n            minLength=\"6\"\n          />\n        </div>\n        <input type=\"submit\" className=\"btn btn-primary\" value=\"Register\" />\n      </form>\n      <p className=\"my-1\">\n        Already have an account? <a href=\"login.html\">Sign In</a>\n      </p>\n    </Fragment>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}