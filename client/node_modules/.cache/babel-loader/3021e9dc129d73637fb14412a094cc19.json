{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/src/components/posts/PostItem.tsx\";\nimport React, { Fragment, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { addLike, removeLike } from \"../../actions/post\"; // import { bindActionCreators } from \"redux\";\n// import { AppState } from \"../../store\";\n// import { ThunkDispatch } from \"redux-thunk\";\n// import PropTypes from \"prop-types\";\n\nimport { ActionTypes } from \"../../actions/types\";\n// type Props = PostItemProps;\nexport const PostItem = ({\n  // addLike,\n  // removeLike,\n  // deletePost,\n  // auth,\n  post: {\n    _id,\n    text,\n    name,\n    avatar,\n    user,\n    likes,\n    comments,\n    date\n  },\n  showActions\n}) => {\n  const auth = useSelector(state => state.auth);\n  const dispatch = useDispatch();\n  const onClickDeletePost = useCallback(postID => {\n    const action = {\n      type: ActionTypes.DELETE_POST,\n      postID\n    };\n    dispatch(action);\n  }, [dispatch]); // const addLike: any = useCallback(() => dispatch(addLike(_id)), [dispatch]);\n\n  return React.createElement(\"div\", {\n    className: \"post bg-white p-1 my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/profile/\".concat(user),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"round-img\",\n    src: avatar,\n    alt: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, name))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, text), React.createElement(\"p\", {\n    className: \"post-date\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \" \", \"Posted on \", React.createElement(Moment, {\n    format: \"YYYY/MM/DD\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, date)), showActions && React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    // onClick={e => addLike(_id)}\n    onClick: () => dispatch(addLike(_id)),\n    type: \"button\",\n    className: \"btn btn-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-thumbs-up\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }), \" \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \" \", likes.length > 0 && React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, likes.length))), React.createElement(\"button\", {\n    onClick: () => dispatch(removeLike(_id)),\n    type: \"button\",\n    className: \"btn btn-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-thumbs-down\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  })), React.createElement(Link, {\n    to: \"/posts/\".concat(_id),\n    className: \"btn btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"Discussion\", \" \", comments.length > 0 && React.createElement(\"span\", {\n    className: \"comment-count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, comments.length)), !auth.loading && user === auth.user._id && React.createElement(\"button\", {\n    onClick: () => onClickDeletePost(_id) // onClick={e => deletePost(_id)}\n    ,\n    type: \"button\",\n    className: \"btn btn-danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-times\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  })))));\n};\nPostItem.defaultProps = {\n  showActions: true\n}; // PostItem.propTypes = {\n//   post: PropTypes.object.isRequired,\n//   auth: PropTypes.object.isRequired,\n//   addLike: PropTypes.func.isRequired,\n//   removeLike: PropTypes.func.isRequired,\n//   deletePost: PropTypes.func.isRequired\n// };\n\n// interface LinkDispatchProps {\n//   addLike: (id: string) => void;\n//   removeLike: (id: string) => void;\n//   deletePost: (id: string) => void;\n// }\n// const mapStateToProps = (state: AppState): LinkStateProps => ({\n//   auth: state.auth\n// });\n// const mapDispatchToProps = (\n//   dispatch: ThunkDispatch<any, any, AppActions>,\n//   ownProps: PostItemProps\n// ): LinkDispatchProps => ({\n//   addLike: bindActionCreators(addLike, dispatch),\n//   removeLike: bindActionCreators(removeLike, dispatch),\n//   deletePost: bindActionCreators(deletePost, dispatch)\n// });\n// export default connect(mapStateToProps, mapDispatchToProps)(PostItem);\nexport default PostItem;","map":{"version":3,"sources":["/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/src/components/posts/PostItem.tsx"],"names":["React","Fragment","useCallback","Link","Moment","useSelector","useDispatch","addLike","removeLike","ActionTypes","PostItem","post","_id","text","name","avatar","user","likes","comments","date","showActions","auth","state","dispatch","onClickDeletePost","postID","action","type","DELETE_POST","length","loading","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAAkBC,WAAlB,EAA+BC,WAA/B,QAAkD,aAAlD;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAgD,oBAAhD,C,CACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,QAA4B,qBAA5B;AA2BA;AAGA,OAAO,MAAMC,QAAiC,GAAG,CAAC;AAChD;AACA;AACA;AACA;AACAC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,IAAP;AAAaC,IAAAA,IAAb;AAAmBC,IAAAA,MAAnB;AAA2BC,IAAAA,IAA3B;AAAiCC,IAAAA,KAAjC;AAAwCC,IAAAA,QAAxC;AAAkDC,IAAAA;AAAlD,GAL0C;AAMhDC,EAAAA;AANgD,CAAD,KAO3C;AACJ,QAAMC,IAAU,GAAGhB,WAAW,CAAuBiB,KAAK,IAAIA,KAAK,CAACD,IAAtC,CAA9B;AAEA,QAAME,QAAa,GAAGjB,WAAW,EAAjC;AAEA,QAAMkB,iBAAiB,GAAGtB,WAAW,CAClCuB,MAAD,IAAoB;AAClB,UAAMC,MAAW,GAAG;AAClBC,MAAAA,IAAI,EAAElB,WAAW,CAACmB,WADA;AAElBH,MAAAA;AAFkB,KAApB;AAIAF,IAAAA,QAAQ,CAACG,MAAD,CAAR;AACD,GAPkC,EAQnC,CAACH,QAAD,CARmC,CAArC,CALI,CAgBJ;;AACA,SACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,qBAAcP,IAAd,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAED,MAAhC;AAAwC,IAAA,GAAG,EAAC,EAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,IAAL,CAFF,CADF,CADF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqBD,IAArB,CADF,EAEE;AAAG,IAAA,SAAS,EAAC,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,GADH,gBAEY,oBAAC,MAAD;AAAQ,IAAA,MAAM,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BM,IAA7B,CAFZ,CAFF,EAOGC,WAAW,IACV,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE;AACA,IAAA,OAAO,EAAE,MAAMG,QAAQ,CAAChB,OAAO,CAACK,GAAD,CAAR,CAFzB;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,SAAS,EAAC,eAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAG,IAAA,SAAS,EAAC,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAMqC,GANrC,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAQK,KAAK,CAACY,MAAN,GAAe,CAAf,IAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOZ,KAAK,CAACY,MAAb,CAA5B,CAPF,CADF,EAUE;AACE,IAAA,OAAO,EAAE,MAAMN,QAAQ,CAACf,UAAU,CAACI,GAAD,CAAX,CADzB;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,SAAS,EAAC,eAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAG,IAAA,SAAS,EAAC,oBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAVF,EAkBE,oBAAC,IAAD;AAAM,IAAA,EAAE,mBAAYA,GAAZ,CAAR;AAA2B,IAAA,SAAS,EAAC,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACa,GADb,EAEGM,QAAQ,CAACW,MAAT,GAAkB,CAAlB,IACC;AAAM,IAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCX,QAAQ,CAACW,MAA1C,CAHJ,CAlBF,EAyBG,CAACR,IAAI,CAACS,OAAN,IAAiBd,IAAI,KAAKK,IAAI,CAACL,IAAL,CAAUJ,GAApC,IACC;AACE,IAAA,OAAO,EAAE,MAAMY,iBAAiB,CAACZ,GAAD,CADlC,CAEE;AAFF;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,SAAS,EAAC,gBAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME;AAAG,IAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CA1BJ,CARJ,CAPF,CADF;AAwDD,CAhFM;AAkFPF,QAAQ,CAACqB,YAAT,GAAwB;AACtBX,EAAAA,WAAW,EAAE;AADS,CAAxB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,eAAeV,QAAf","sourcesContent":["import React, { Fragment, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport { connect, useSelector, useDispatch } from \"react-redux\";\nimport { addLike, removeLike, deletePost } from \"../../actions/post\";\n// import { bindActionCreators } from \"redux\";\n// import { AppState } from \"../../store\";\n// import { ThunkDispatch } from \"redux-thunk\";\n// import PropTypes from \"prop-types\";\nimport { ActionTypes } from \"../../actions/types\";\nimport { User } from \"../../types/User\";\nimport { Auth } from \"../../types/Auth\";\nimport PostForm from \"./PostForm\";\n// import post from \"../../reducers/post\";\n\n// take out everything we get from the state (the state itself and the actions we use) we will instead define them in the component using useSelector(), useDispatch(), and useCallback()\ninterface PostItemProps {\n  // addLike: React.Dispatch<React.SetStateAction<any>>;\n  // removeLike: React.Dispatch<React.SetStateAction<any>>;\n  // deletePost: React.Dispatch<React.SetStateAction<any>>;\n  // auth: Auth;\n  post: {\n    _id: string;\n    text: string;\n    name: string;\n    avatar: string;\n    user: string;\n    likes: [{ user: User }];\n    comments: [\n      { user: User; text: string; name: string; avatar: string; date: Date }\n    ];\n    date: any;\n  };\n  showActions: boolean;\n}\n\n// type Props = PostItemProps;\n// & LinkDispatchProps & LinkStateProps;\n\nexport const PostItem: React.FC<PostItemProps> = ({\n  // addLike,\n  // removeLike,\n  // deletePost,\n  // auth,\n  post: { _id, text, name, avatar, user, likes, comments, date },\n  showActions\n}) => {\n  const auth: Auth = useSelector<LinkStateProps, Auth>(state => state.auth);\n\n  const dispatch: any = useDispatch();\n\n  const onClickDeletePost = useCallback(\n    (postID: string) => {\n      const action: any = {\n        type: ActionTypes.DELETE_POST,\n        postID\n      };\n      dispatch(action);\n    },\n    [dispatch]\n  );\n\n  // const addLike: any = useCallback(() => dispatch(addLike(_id)), [dispatch]);\n  return (\n    <div className=\"post bg-white p-1 my-1\">\n      <div>\n        <Link to={`/profile/${user}`}>\n          <img className=\"round-img\" src={avatar} alt=\"\" />\n          <h4>{name}</h4>\n        </Link>\n      </div>\n      <div>\n        <p className=\"my-1\">{text}</p>\n        <p className=\"post-date\">\n          {\" \"}\n          Posted on <Moment format=\"YYYY/MM/DD\">{date}</Moment>\n        </p>\n\n        {showActions && (\n          <Fragment>\n            <button\n              // onClick={e => addLike(_id)}\n              onClick={() => dispatch(addLike(_id))}\n              type=\"button\"\n              className=\"btn btn-light\"\n            >\n              <i className=\"fas fa-thumbs-up\" />{\" \"}\n              <span> {likes.length > 0 && <span>{likes.length}</span>}</span>\n            </button>\n            <button\n              onClick={() => dispatch(removeLike(_id))}\n              type=\"button\"\n              className=\"btn btn-light\"\n            >\n              <i className=\"fas fa-thumbs-down\" />\n            </button>\n\n            <Link to={`/posts/${_id}`} className=\"btn btn-primary\">\n              Discussion{\" \"}\n              {comments.length > 0 && (\n                <span className=\"comment-count\">{comments.length}</span>\n              )}\n            </Link>\n\n            {!auth.loading && user === auth.user._id && (\n              <button\n                onClick={() => onClickDeletePost(_id)}\n                // onClick={e => deletePost(_id)}\n                type=\"button\"\n                className=\"btn btn-danger\"\n              >\n                <i className=\"fas fa-times\" />\n              </button>\n            )}\n          </Fragment>\n        )}\n      </div>\n    </div>\n  );\n};\n\nPostItem.defaultProps = {\n  showActions: true\n};\n\n// PostItem.propTypes = {\n//   post: PropTypes.object.isRequired,\n//   auth: PropTypes.object.isRequired,\n//   addLike: PropTypes.func.isRequired,\n//   removeLike: PropTypes.func.isRequired,\n//   deletePost: PropTypes.func.isRequired\n// };\n\ninterface LinkStateProps {\n  auth: Auth;\n}\n\n// interface LinkDispatchProps {\n//   addLike: (id: string) => void;\n//   removeLike: (id: string) => void;\n//   deletePost: (id: string) => void;\n// }\n\n// const mapStateToProps = (state: AppState): LinkStateProps => ({\n//   auth: state.auth\n// });\n\n// const mapDispatchToProps = (\n//   dispatch: ThunkDispatch<any, any, AppActions>,\n//   ownProps: PostItemProps\n// ): LinkDispatchProps => ({\n//   addLike: bindActionCreators(addLike, dispatch),\n//   removeLike: bindActionCreators(removeLike, dispatch),\n//   deletePost: bindActionCreators(deletePost, dispatch)\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(PostItem);\nexport default PostItem;\n"]},"metadata":{},"sourceType":"module"}