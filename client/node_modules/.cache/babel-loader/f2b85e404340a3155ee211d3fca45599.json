{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { ActionTypes } from \"./types\";\nexport const getPosts = () => {\n  return async (dispatch, getState) => {\n    try {\n      const res = await axios.get(\"/api/posts\");\n      dispatch({\n        type: ActionTypes.GET_POSTS,\n        posts: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionTypes.POST_ERROR,\n        msg: err.response.statusText,\n        status: err.response.status\n      });\n    }\n  };\n};\nexport const addLike = id => {\n  return async (dispatch, getState) => {\n    try {\n      const res = await axios.put(\"/api/posts/like/\".concat(id));\n      dispatch({\n        type: ActionTypes.UPDATE_LIKES,\n        id: id,\n        likes: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionTypes.POST_ERROR,\n        msg: err.response.statusText,\n        status: err.response.status\n      });\n    }\n  };\n};\nexport const removeLike = id => {\n  return async (dispatch, getState) => {\n    try {\n      const res = await axios.put(\"/api/posts/unlike/\".concat(id));\n      dispatch({\n        type: ActionTypes.UPDATE_LIKES,\n        id: id,\n        likes: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionTypes.POST_ERROR,\n        msg: err.response.statusText,\n        status: err.response.status\n      });\n    }\n  };\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(\"/api/posts/\".concat(id));\n    dispatch({\n      type: ActionTypes.DELETE_POST,\n      id: id\n    });\n    console.log(\"fghnb\");\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: ActionTypes.ADD_POST,\n      post: res.data\n    });\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const getPost = id => {\n  return async (dispatch, getState) => {\n    try {\n      const res = await axios.get(\"/api/posts/\".concat(id));\n      dispatch({\n        type: ActionTypes.GET_POST,\n        post: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionTypes.POST_ERROR,\n        msg: err.response.statusText,\n        status: err.response.status\n      });\n    }\n  };\n};\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts/comment/\".concat(postId), formData, config);\n    dispatch({\n      type: ActionTypes.ADD_COMMENT,\n      comment: res.data\n    });\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    const res = await axios.delete(\"/api/posts/comment/\".concat(postId, \"/\").concat(commentId));\n    dispatch({\n      type: ActionTypes.REMOVE_COMMENT,\n      id: commentId\n    });\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};","map":{"version":3,"sources":["/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/src/actions/post.ts"],"names":["axios","setAlert","ActionTypes","getPosts","dispatch","getState","res","get","type","GET_POSTS","posts","data","err","POST_ERROR","msg","response","statusText","status","addLike","id","put","UPDATE_LIKES","likes","removeLike","deletePost","delete","DELETE_POST","console","log","addPost","formData","config","headers","post","ADD_POST","getPost","GET_POST","addComment","postId","ADD_COMMENT","comment","deleteComment","commentId","REMOVE_COMMENT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { ActionTypes, AppActions } from \"./types\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { Dispatch } from \"redux\";\nimport { AppState } from \"../store\";\n\nexport const getPosts = () => {\n  return async (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\n    try {\n      const res = await axios.get(\"/api/posts\");\n\n      dispatch({\n        type: ActionTypes.GET_POSTS,\n        posts: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionTypes.POST_ERROR,\n        msg: err.response.statusText,\n        status: err.response.status\n      });\n    }\n  };\n};\n\nexport const addLike = (id: string) => {\n  return async (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\n    try {\n      const res = await axios.put(`/api/posts/like/${id}`);\n\n      dispatch({\n        type: ActionTypes.UPDATE_LIKES,\n        id: id,\n        likes: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionTypes.POST_ERROR,\n        msg: err.response.statusText,\n        status: err.response.status\n      });\n    }\n  };\n};\n\nexport const removeLike = (id: string) => {\n  return async (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\n    try {\n      const res = await axios.put(`/api/posts/unlike/${id}`);\n\n      dispatch({\n        type: ActionTypes.UPDATE_LIKES,\n        id: id,\n        likes: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionTypes.POST_ERROR,\n        msg: err.response.statusText,\n        status: err.response.status\n      });\n    }\n  };\n};\n\nexport const deletePost = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AppActions> => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${id}`);\n\n    dispatch({\n      type: ActionTypes.DELETE_POST,\n      id: id\n    });\n\n    console.log(\"fghnb\");\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const addPost = (\n  formData: string\n): ThunkAction<Promise<void>, {}, {}, AppActions> => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const res = await axios.post(`/api/posts`, formData, config);\n\n    dispatch({\n      type: ActionTypes.ADD_POST,\n      post: res.data\n    });\n\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const getPost = (id: string) => {\n  return async (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\n    try {\n      const res = await axios.get(`/api/posts/${id}`);\n\n      dispatch({\n        type: ActionTypes.GET_POST,\n        post: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionTypes.POST_ERROR,\n        msg: err.response.statusText,\n        status: err.response.status\n      });\n    }\n  };\n};\n\nexport const addComment = (\n  postId: string,\n  formData: string\n): ThunkAction<Promise<void>, {}, {}, AppActions> => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const res = await axios.post(\n      `/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ActionTypes.ADD_COMMENT,\n      comment: res.data\n    });\n\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const deleteComment = (\n  postId: string,\n  commentId: string\n): ThunkAction<Promise<void>, {}, {}, AppActions> => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: ActionTypes.REMOVE_COMMENT,\n      id: commentId\n    });\n\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}