{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/layout/Alert.js\";\n// this is the alert component that will be used to display an alert message to the user\nimport React from \"react\"; // need this to use props\n// This file is getting the setAlert proptype from Register.js in the components folder\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\"; // \"alerts\" is the name we made up for incoming data (props) being passed in\n// since we only need 1 expression here we removed the curly braces\n\nconst Alert = ({\n  alerts\n}) => alerts !== null && alerts.length > 0 && alerts.map(alert => React.createElement(\"div\", {\n  key: alert.id,\n  className: \"alert alert-\".concat(alert.alertType),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, alert.msg))( // \"alerts\" is going to be a proptype so we need to put it here so when we export it at the end of this file, it will be usable by other files\n// the shortcut for \"PropTypes.array.isRequired\" is \"ptar\" + TAB key\nAlert.propTypes = {\n  alerts: PropTypes.array.isRequired\n}); // this will take the alert state (the array of alerts we saw in the Redux tab of Chrome browser's console) and bring it in so we can use it here\n// \"state\" is passed in as a parameter\n// \"alerts\" is a name we made up for the incoming prop in \"const Alert\" above\n// With \"state.alert\" we get the state from whatever we want from the rootReducer (the Root Reducer is the index.js file in the \"reducers\" folder). Remember that the Root Reducer contains all the data from all your reducers. So we are just accessing the data from the alert reducer that got passed into that index.js file's export statement with export default combineReducers({ alert });   We are getting that state inside of \"alert\"\n\n\nconst mapStateToProps = state => ({\n  alerts: state.alert\n}); // we pass in the 1st param only (state) b/c we don't need any actions like in Alert.js (actions would be the 2nd param)\n\n\nexport default connect(mapStateToProps)(Alert);","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/layout/Alert.js"],"names":["React","PropTypes","connect","Alert","alerts","length","map","alert","id","alertType","msg","propTypes","array","isRequired","mapStateToProps","state"],"mappings":";AAAA;AAEA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;AACA;;AACA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KACZA,MAAM,KAAK,IAAX,IACAA,MAAM,CAACC,MAAP,GAAgB,CADhB,IAEAD,MAAM,CAACE,GAAP,CAAWC,KAAK,IACd;AAAK,EAAA,GAAG,EAAEA,KAAK,CAACC,EAAhB;AAAoB,EAAA,SAAS,wBAAiBD,KAAK,CAACE,SAAvB,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACGF,KAAK,CAACG,GADT,CADF,GAKE;AACA;AACCP,KAAK,CAACQ,SAAN,GAAkB;AACjBP,EAAAA,MAAM,EAAEH,SAAS,CAACW,KAAV,CAAgBC;AADP,CAPrB,CAHF,C,CAeA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCX,EAAAA,MAAM,EAAEW,KAAK,CAACR;AADkB,CAAL,CAA7B,C,CAIA;;;AACA,eAAeL,OAAO,CAACY,eAAD,CAAP,CAAyBX,KAAzB,CAAf","sourcesContent":["// this is the alert component that will be used to display an alert message to the user\n\nimport React from \"react\";\n// need this to use props\n// This file is getting the setAlert proptype from Register.js in the components folder\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\n// \"alerts\" is the name we made up for incoming data (props) being passed in\n// since we only need 1 expression here we removed the curly braces\nconst Alert = ({ alerts }) =>\n  alerts !== null &&\n  alerts.length > 0 &&\n  alerts.map(alert => (\n    <div key={alert.id} className={`alert alert-${alert.alertType}`}>\n      {alert.msg}\n    </div>\n  ))(\n    // \"alerts\" is going to be a proptype so we need to put it here so when we export it at the end of this file, it will be usable by other files\n    // the shortcut for \"PropTypes.array.isRequired\" is \"ptar\" + TAB key\n    (Alert.propTypes = {\n      alerts: PropTypes.array.isRequired\n    })\n  );\n\n// this will take the alert state (the array of alerts we saw in the Redux tab of Chrome browser's console) and bring it in so we can use it here\n// \"state\" is passed in as a parameter\n// \"alerts\" is a name we made up for the incoming prop in \"const Alert\" above\n// With \"state.alert\" we get the state from whatever we want from the rootReducer (the Root Reducer is the index.js file in the \"reducers\" folder). Remember that the Root Reducer contains all the data from all your reducers. So we are just accessing the data from the alert reducer that got passed into that index.js file's export statement with export default combineReducers({ alert });   We are getting that state inside of \"alert\"\nconst mapStateToProps = state => ({\n  alerts: state.alert\n});\n\n// we pass in the 1st param only (state) b/c we don't need any actions like in Alert.js (actions would be the 2nd param)\nexport default connect(mapStateToProps)(Alert);\n"]},"metadata":{},"sourceType":"module"}