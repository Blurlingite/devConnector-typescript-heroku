{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/App.js\";\nimport React, { Fragment, useEffect } from \"react\"; // useEffect is a hook we can use the loadUser action b/c we are using functions\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navbar from \"./components/layout/Navbar\"; // bring in Navbar component\n\nimport Landing from \"./components/layout/Landing\";\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\"; // we must put the Alert tag above the container but above the Switch tag b/c the Switch tag can only have routes in it\n\nimport Alert from \"./components/layout/Alert\";\nimport Dashboard from \"./components/dashboard/Dashboard\"; // Redux\n// need a provider so we can connect Redux to React, we will enclose our entire app (our React app) in a Provider tag\n\nimport { Provider } from \"react-redux\"; // bring in the redux store found in our store.js that we made\n\nimport store from \"./store\"; // import the loadUser action we made\n\nimport { loadUser } from \"./actions/auth\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport \"./App.css\"; // this is also in actions/auth.js  See those comments\n\nif (localStorage.token) {\n  setAuthToken(localStorage.token);\n} // we added {} and a return before the parantheses to const App b/c we want to use the loadUser action but we can't without the {} b/c App only returns JSX (which is not what loadUser will use)\n\n\nconst App = () => {\n  // when the state updates, \"useEffect\" will keep running in a constant loop unless we add a second parameter of empty square brackets. So after that \"useEffect\" will only run once (which we want) This is similar to a componentDidMount in React. If you put properties in those square brackets it will make it so that the App will only update when those properties update. The empty square brackets tell React that your effect doesn't depend on any values from props or state so it never needs to re-run\n  useEffect(() => {\n    // take the Redux store directly (store) and dispatch (.dispatch) and then pass in the action you want to use (loadUser())\n    store.dispatch(loadUser());\n  });\n  return (// enclose everything in a Provider tag so all our components can access the app level state in the redux store\n    // we need to pass in the redux store to the Provider\n    React.createElement(Provider, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      component: Landing,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(\"section\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Alert, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(Route, {\n      exact: true,\n      path: \"/register\",\n      component: Register,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/login\",\n      component: Login,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(Route, {\n      exact: true,\n      path: \"/dashboard\",\n      component: Dashboard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }))))))\n  );\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/App.js"],"names":["React","Fragment","useEffect","BrowserRouter","Router","Route","Switch","Navbar","Landing","Register","Login","Alert","Dashboard","Provider","store","loadUser","setAuthToken","localStorage","token","App","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAAoD;;AACpD,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;AACA,OAAOC,MAAP,MAAmB,4BAAnB,C,CAAiD;;AACjD,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,KAAP,MAAkB,yBAAlB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,SAAP,MAAsB,kCAAtB,C,CAEA;AACA;;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB,C,CACA;;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAO,WAAP,C,CAEA;;AACA,IAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBF,EAAAA,YAAY,CAACC,YAAY,CAACC,KAAd,CAAZ;AACD,C,CAED;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAChB;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACd;AACAY,IAAAA,KAAK,CAACM,QAAN,CAAeL,QAAQ,EAAvB;AACD,GAHQ,CAAT;AAIA,SACE;AACA;AACA,wBAAC,QAAD;AAAU,MAAA,KAAK,EAAED,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAME,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,GAAlB;AAAsB,MAAA,SAAS,EAAEN,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,EAQE;AAAS,MAAA,SAAS,EAAC,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,WAAlB;AAA8B,MAAA,SAAS,EAAEC,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,QAAlB;AAA2B,MAAA,SAAS,EAAEC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAC,YAAlB;AAA+B,MAAA,SAAS,EAAEE,SAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CALF,CARF,CAFF,CAHF;AAHF;AAgCD,CAtCD;;AAwCA,eAAeO,GAAf","sourcesContent":["import React, { Fragment, useEffect } from \"react\"; // useEffect is a hook we can use the loadUser action b/c we are using functions\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Navbar from \"./components/layout/Navbar\"; // bring in Navbar component\nimport Landing from \"./components/layout/Landing\";\nimport Register from \"./components/auth/Register\";\nimport Login from \"./components/auth/Login\";\n// we must put the Alert tag above the container but above the Switch tag b/c the Switch tag can only have routes in it\nimport Alert from \"./components/layout/Alert\";\nimport Dashboard from \"./components/dashboard/Dashboard\";\n\n// Redux\n// need a provider so we can connect Redux to React, we will enclose our entire app (our React app) in a Provider tag\nimport { Provider } from \"react-redux\";\n// bring in the redux store found in our store.js that we made\nimport store from \"./store\";\n// import the loadUser action we made\nimport { loadUser } from \"./actions/auth\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport \"./App.css\";\n\n// this is also in actions/auth.js  See those comments\nif (localStorage.token) {\n  setAuthToken(localStorage.token);\n}\n\n// we added {} and a return before the parantheses to const App b/c we want to use the loadUser action but we can't without the {} b/c App only returns JSX (which is not what loadUser will use)\nconst App = () => {\n  // when the state updates, \"useEffect\" will keep running in a constant loop unless we add a second parameter of empty square brackets. So after that \"useEffect\" will only run once (which we want) This is similar to a componentDidMount in React. If you put properties in those square brackets it will make it so that the App will only update when those properties update. The empty square brackets tell React that your effect doesn't depend on any values from props or state so it never needs to re-run\n  useEffect(() => {\n    // take the Redux store directly (store) and dispatch (.dispatch) and then pass in the action you want to use (loadUser())\n    store.dispatch(loadUser());\n  });\n  return (\n    // enclose everything in a Provider tag so all our components can access the app level state in the redux store\n    // we need to pass in the redux store to the Provider\n    <Provider store={store}>\n      {/* in order for router to work, wrap everything in Router tag\n   Router was brought in by this:   import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\"; */}\n      <Router>\n        {/* Fragment is a ghost element, it won't show up in the DOM*/}\n        <Fragment>\n          <Navbar />\n          {/* Render Landing component\n        The \"exact path\" is where the component will show up (in this case it will be the home page b/c of the \"/\")\n        The \"component\" is which component you want there\n      */}\n          <Route exact path=\"/\" component={Landing} />\n          {/* Everything has a container class expect Landing component so put them all in this section with that className */}\n          <section className=\"container\">\n            {/* wrap everything in a Switch so we don't have issues with private routes */}\n\n            {/* See Section 7 video 39 starting at 12:20 for a full explanation of how this Alert component is working in the backend */}\n            <Alert />\n            <Switch>\n              {/* This component will only show up when the URL ends with \"/register\" */}\n              <Route exact path=\"/register\" component={Register} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/dashboard\" component={Dashboard} />\n            </Switch>\n          </section>\n        </Fragment>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}