{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_COMMENT, REMOVE_COMMENT, ActionTypes } from \"./types\";\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts\");\n    dispatch({\n      type: ActionTypes.GET_POSTS,\n      posts: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/like/\".concat(id));\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/unlike/\".concat(id));\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(\"/api/posts/\".concat(id));\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: ActionTypes.ADD_POST,\n      post: res.data\n    });\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts/\".concat(id));\n    dispatch({\n      type: ActionTypes.GET_POST,\n      post: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts/comment/\".concat(postId), formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    const res = await axios.delete(\"/api/posts/comment/\".concat(postId, \"/\").concat(commentId));\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/src/actions/post.ts"],"names":["axios","setAlert","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_COMMENT","REMOVE_COMMENT","ActionTypes","getPosts","dispatch","res","get","type","GET_POSTS","posts","data","err","payload","msg","response","statusText","status","addLike","id","put","likes","removeLike","deletePost","delete","addPost","formData","config","headers","post","ADD_POST","getPost","GET_POST","addComment","postId","deleteComment","commentId"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,UADF,EAEEC,YAFF,EAGEC,WAHF,EAIEC,WAJF,EAKEC,cALF,EAMEC,WANF,QAOO,SAPP;AAWA,OAAO,MAAMC,QAAQ,GAAG,MAKnB,MAAMC,QAAN,IAAkB;AACrB,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,YAAV,CAAlB;AAEAF,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEL,WAAW,CAACM,SADX;AAEPC,MAAAA,KAAK,EAAEJ,GAAG,CAACK;AAFJ,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEL,GAAG,CAACG,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAnBM;AAqBP,OAAO,MAAMC,OAAO,GAClBC,EADqB,IAE6B,MAAMd,QAAN,IAAkB;AACpE,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACwB,GAAN,2BAA6BD,EAA7B,EAAlB;AAEAd,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,YADC;AAEPc,MAAAA,OAAO,EAAE;AAAEM,QAAAA,EAAF;AAAME,QAAAA,KAAK,EAAEf,GAAG,CAACK;AAAjB;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEL,GAAG,CAACG,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAhBM;AAkBP,OAAO,MAAMK,UAAU,GACrBH,EADwB,IAE0B,MAAMd,QAAN,IAAkB;AACpE,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACwB,GAAN,6BAA+BD,EAA/B,EAAlB;AAEAd,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAET,YADC;AAEPc,MAAAA,OAAO,EAAE;AAAEM,QAAAA,EAAF;AAAME,QAAAA,KAAK,EAAEf,GAAG,CAACK;AAAjB;AAFF,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEL,GAAG,CAACG,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAhBM;AAkBP,OAAO,MAAMM,UAAU,GACrBJ,EADwB,IAE0B,MAAMd,QAAN,IAAkB;AACpE,MAAI;AACF,UAAMT,KAAK,CAAC4B,MAAN,sBAA2BL,EAA3B,EAAN;AAEAd,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAER,WADC;AAEPa,MAAAA,OAAO,EAAEM;AAFF,KAAD,CAAR;AAKAd,IAAAA,QAAQ,CAACR,QAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAT,CAAR;AACD,GATD,CASE,OAAOe,GAAP,EAAY;AACZP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEL,GAAG,CAACG,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAlBM;AAoBP,OAAO,MAAMQ,OAAO,GAClBC,QADqB,IAE6B,MAAMrB,QAAN,IAAkB;AACpE,QAAMsB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAKA,MAAI;AACF,UAAMtB,GAAG,GAAG,MAAMV,KAAK,CAACiC,IAAN,eAAyBH,QAAzB,EAAmCC,MAAnC,CAAlB;AAEAtB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEL,WAAW,CAAC2B,QADX;AAEPD,MAAAA,IAAI,EAAEvB,GAAG,CAACK;AAFH,KAAD,CAAR;AAKAN,IAAAA,QAAQ,CAACR,QAAQ,CAAC,cAAD,EAAiB,SAAjB,CAAT,CAAR;AACD,GATD,CASE,OAAOe,GAAP,EAAY;AACZP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEL,GAAG,CAACG,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAvBM;AAyBP,OAAO,MAAMc,OAAO,GAClBZ,EADqB,IAE6B,MAAMd,QAAN,IAAkB;AACpE,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAACW,GAAN,sBAAwBY,EAAxB,EAAlB;AAEAd,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEL,WAAW,CAAC6B,QADX;AAEPH,MAAAA,IAAI,EAAEvB,GAAG,CAACK;AAFH,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEL,GAAG,CAACG,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAhBM;AAkBP,OAAO,MAAMgB,UAAU,GAAG,CACxBC,MADwB,EAExBR,QAFwB,KAG0B,MAAMrB,QAAN,IAAkB;AACpE,QAAMsB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;;AAKA,MAAI;AACF,UAAMtB,GAAG,GAAG,MAAMV,KAAK,CAACiC,IAAN,8BACMK,MADN,GAEhBR,QAFgB,EAGhBC,MAHgB,CAAlB;AAMAtB,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEP,WADC;AAEPY,MAAAA,OAAO,EAAEP,GAAG,CAACK;AAFN,KAAD,CAAR;AAKAN,IAAAA,QAAQ,CAACR,QAAQ,CAAC,eAAD,EAAkB,SAAlB,CAAT,CAAR;AACD,GAbD,CAaE,OAAOe,GAAP,EAAY;AACZP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEL,GAAG,CAACG,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CA5BM;AA8BP,OAAO,MAAMkB,aAAa,GAAG,CAC3BD,MAD2B,EAE3BE,SAF2B,KAGuB,MAAM/B,QAAN,IAAkB;AACpE,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,KAAK,CAAC4B,MAAN,8BAAmCU,MAAnC,cAA6CE,SAA7C,EAAlB;AAEA/B,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEN,cADC;AAEPW,MAAAA,OAAO,EAAEuB;AAFF,KAAD,CAAR;AAKA/B,IAAAA,QAAQ,CAACR,QAAQ,CAAC,iBAAD,EAAoB,SAApB,CAAT,CAAR;AACD,GATD,CASE,OAAOe,GAAP,EAAY;AACZP,IAAAA,QAAQ,CAAC;AACPG,MAAAA,IAAI,EAAEV,UADC;AAEPe,MAAAA,OAAO,EAAE;AAAEC,QAAAA,GAAG,EAAEF,GAAG,CAACG,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEL,GAAG,CAACG,QAAJ,CAAaE;AAArD;AAFF,KAAD,CAAR;AAID;AACF,CAnBM","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport {\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT,\n  ActionTypes\n} from \"./types\";\nimport { AnyAction } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\n\nexport const getPosts = (): ThunkAction<\n  Promise<void>,\n  {},\n  {},\n  AnyAction\n> => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts\");\n\n    dispatch({\n      type: ActionTypes.GET_POSTS,\n      posts: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const addLike = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const removeLike = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: { id, likes: res.data }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const deletePost = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${id}`);\n\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const addPost = (\n  formData: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const res = await axios.post(`/api/posts`, formData, config);\n\n    dispatch({\n      type: ActionTypes.ADD_POST,\n      post: res.data\n    });\n\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const getPost = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n\n    dispatch({\n      type: ActionTypes.GET_POST,\n      post: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const addComment = (\n  postId: string,\n  formData: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const res = await axios.post(\n      `/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\nexport const deleteComment = (\n  postId: string,\n  commentId: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}