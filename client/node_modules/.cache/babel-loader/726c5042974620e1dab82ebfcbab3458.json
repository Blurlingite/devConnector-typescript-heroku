{"ast":null,"code":"import _objectSpread from \"/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: payload,\n        loading: false\n      });\n\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...state.posts],\n        loading: false\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        // post is of type \"any\" b/c the \"_id\" is randomly generated by the NoSQL database. It is not a field in my Post object\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(post => post._id === payload.id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    case ADD_COMMENT:\n      return _objectSpread({}, state, {\n        // post: { ...state.post, comments: payload },\n        loading: false\n      });\n\n    case REMOVE_COMMENT:\n      return _objectSpread({}, state, {\n        // post: {\n        //   ...state.post,\n        //   comments: state.post.comments.filter(\n        //     comment => comment._id !== payload\n        //   )\n        // },\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/src/reducers/post.ts"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes"],"mappings":";AAAA,SACEA,SADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,QALF,EAMEC,QANF,EAOEC,WAPF,EAQEC,cARF,QASO,kBATP;AAaA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAwD;AAAA,QAC7DC,IAD6D,GAC3CD,MAD2C,CAC7DC,IAD6D;AAAA,QACvDC,OADuD,GAC3CF,MAD2C,CACvDE,OADuD;;AAGrE,UAAQD,IAAR;AACE,SAAKf,SAAL;AACE,+BACKa,KADL;AAEEJ,QAAAA,KAAK,EAAEO,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAMF,SAAKN,QAAL;AACE,+BACKQ,KADL;AAEEH,QAAAA,IAAI,EAAEM,OAFR;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAMF,SAAKP,QAAL;AACE,+BACKS,KADL;AAEEJ,QAAAA,KAAK,EAAE,CAACO,OAAD,EAAU,GAAGH,KAAK,CAACJ,KAAnB,CAFT;AAGEE,QAAAA,OAAO,EAAE;AAHX;;AAMF,SAAKR,WAAL;AACE,+BACKU,KADL;AAEE;AACAJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAoBP,IAAD,IAAeA,IAAI,CAACQ,GAAL,KAAaF,OAA/C,CAHT;AAIEL,QAAAA,OAAO,EAAE;AAJX;;AAOF,SAAKV,UAAL;AACE,+BACKY,KADL;AAEED,QAAAA,KAAK,EAAEI,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAMF,SAAKT,YAAL;AACE,+BACKW,KADL;AAEEJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAiBT,IAAD,IACrBA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACI,EAArB,qBAA+BV,IAA/B;AAAqCW,UAAAA,KAAK,EAAEL,OAAO,CAACK;AAApD,aAA8DX,IADzD,CAFT;AAKEC,QAAAA,OAAO,EAAE;AALX;;AAQF,SAAKL,WAAL;AACE,+BACKO,KADL;AAEE;AACAF,QAAAA,OAAO,EAAE;AAHX;;AAKF,SAAKJ,cAAL;AACE,+BACKM,KADL;AAEE;AACA;AACA;AACA;AACA;AACA;AACAF,QAAAA,OAAO,EAAE;AARX;;AAWF;AACE,aAAOE,KAAP;AAjEJ;AAmED","sourcesContent":["import {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT\n} from \"../actions/types\";\nimport { PostActionTypes } from \"../actions/types\";\nimport { Post } from \"../types/Post\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\n\nexport default function(state = initialState, action: PostActionTypes) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return {\n        ...state,\n        // post is of type \"any\" b/c the \"_id\" is randomly generated by the NoSQL database. It is not a field in my Post object\n        posts: state.posts.filter((post: any) => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map((post: any) =>\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return {\n        ...state,\n        // post: { ...state.post, comments: payload },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        // post: {\n        //   ...state.post,\n        //   comments: state.post.comments.filter(\n        //     comment => comment._id !== payload\n        //   )\n        // },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}