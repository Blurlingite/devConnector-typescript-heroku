{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/posts/PostItem.js\";\n// Section 11 Lecture 61 - Post Item Component\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\"; // used when we add a like, remove a like, delete a post,etc\n\nimport { connect } from \"react-redux\";\n\nconst PostItem = ({\n  addLike,\n  removeLike,\n  deletePost,\n  auth,\n  post: {\n    _id,\n    text,\n    name,\n    avatar,\n    user,\n    likes,\n    comments,\n    date\n  },\n  showActions\n}) => React.createElement(\"div\", {\n  class: \"post bg-white p-1 my-1\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}, React.createElement(Link, {\n  to: \"/profile/\".concat(user),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  class: \"round-img\",\n  src: avatar,\n  alt: \"\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}), React.createElement(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, name))), React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, React.createElement(\"p\", {\n  class: \"my-1\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25\n  },\n  __self: this\n}, text), React.createElement(\"p\", {\n  class: \"post-date\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, \"Posted on \", React.createElement(Moment, {\n  format: \"YYYY/MM/DD\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}, date)), showActions && React.createElement(Fragment, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  onClick: e => addLike(_id),\n  type: \"button\",\n  class: \"btn btn-light\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  class: \"fas fa-thumbs-up\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}), \" \", React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, likes.length > 0 && React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, likes.length))), React.createElement(\"button\", {\n  onClick: e => removeLike(_id),\n  type: \"button\",\n  class: \"btn btn-light\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 40\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  class: \"fas fa-thumbs-down\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n})), React.createElement(Link, {\n  to: \"/posts/\".concat(_id),\n  class: \"btn btn-primary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 47\n  },\n  __self: this\n}, \"Discussion\", \" \", comments.length > 0 && React.createElement(\"span\", {\n  class: \"comment-count\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 50\n  },\n  __self: this\n}, comments.length)), !auth.loading && user === auth.user._id && //Even thought this is taking away the button from the user, it is also protected on the backout so only the designated user can delete their own posts\nReact.createElement(\"button\", {\n  onClick: e => deletePost(_id),\n  type: \"button\",\n  class: \"btn btn-danger\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  class: \"fas fa-times\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 60\n  },\n  __self: this\n})))));\n\nPostItem.defaultProps = {\n  showActions: true\n};\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  addLike: PropTypes.func.isRequired,\n  removeLike: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  addLike,\n  removeLike,\n  deletePost\n})(PostItem); // const PostItem = ({\n//   auth,\n//   post: { _id, text, name, avatar, user, likes, comments, date }\n// }) => (\n//   <div class=\"post bg-white p-1 my-1\">\n//     <div>\n//       <a href=\"profile.html\">\n//         <img\n//           class=\"round-img\"\n//           src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\n//           alt=\"\"\n//         />\n//         <h4>John Doe</h4>\n//       </a>\n//     </div>\n//     <div>\n//       <p class=\"my-1\">\n//         Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint possimus\n//         corporis sunt necessitatibus! Minus nesciunt soluta suscipit nobis. Amet\n//         accusamus distinctio cupiditate blanditiis dolor? Illo perferendis\n//         eveniet cum cupiditate aliquam?\n//       </p>\n//       <p class=\"post-date\">Posted on 04/16/2019</p>\n//       <button type=\"button\" class=\"btn btn-light\">\n//         <i class=\"fas fa-thumbs-up\" />\n//         <span>4</span>\n//       </button>\n//       <button type=\"button\" class=\"btn btn-light\">\n//         <i class=\"fas fa-thumbs-down\" />\n//       </button>\n//       <a href=\"post.html\" class=\"btn btn-primary\">\n//         Discussion <span class=\"comment-count\">2</span>\n//       </a>\n//       <button type=\"button\" class=\"btn btn-danger\">\n//         <i class=\"fas fa-times\" />\n//       </button>\n//     </div>\n//   </div>\n// );\n// PostItem.propTypes = {\n//   post: PropTypes.object.isRequired,\n//   auth: PropTypes.object.isRequired\n// };\n// // uses auth's state so we can provide a button to delete a post/comment only if that post/comment belongs to that user\n// const mapStateToProps = state => ({\n//   auth: state.auth\n// });\n// export default connect(\n//   mapStateToProps,\n//   {}\n// )(PostItem);","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/posts/PostItem.js"],"names":["React","Fragment","PropTypes","Link","Moment","connect","PostItem","addLike","removeLike","deletePost","auth","post","_id","text","name","avatar","user","likes","comments","date","showActions","e","length","loading","defaultProps","propTypes","object","isRequired","func","mapStateToProps","state"],"mappings":"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","sourcesContent":["// Section 11 Lecture 61 - Post Item Component\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\";\n// used when we add a like, remove a like, delete a post,etc\nimport { connect } from \"react-redux\";\n\nconst PostItem = ({\n  addLike,\n  removeLike,\n  deletePost,\n  auth,\n  post: { _id, text, name, avatar, user, likes, comments, date },\n  showActions\n}) => (\n  <div class=\"post bg-white p-1 my-1\">\n    <div>\n      <Link to={`/profile/${user}`}>\n        <img class=\"round-img\" src={avatar} alt=\"\" />\n        <h4>{name}</h4>\n      </Link>\n    </div>\n    <div>\n      <p class=\"my-1\">{text}</p>\n      <p class=\"post-date\">\n        Posted on <Moment format=\"YYYY/MM/DD\">{date}</Moment>\n      </p>\n\n      {showActions && (\n        <Fragment>\n          <button\n            onClick={e => addLike(_id)}\n            type=\"button\"\n            class=\"btn btn-light\"\n          >\n            <i class=\"fas fa-thumbs-up\" />{\" \"}\n            <span>{likes.length > 0 && <span>{likes.length}</span>}</span>\n          </button>\n          <button\n            onClick={e => removeLike(_id)}\n            type=\"button\"\n            class=\"btn btn-light\"\n          >\n            <i class=\"fas fa-thumbs-down\" />\n          </button>\n          <Link to={`/posts/${_id}`} class=\"btn btn-primary\">\n            Discussion{\" \"}\n            {comments.length > 0 && (\n              <span class=\"comment-count\">{comments.length}</span>\n            )}\n          </Link>\n          {!auth.loading &&\n          user === auth.user._id && ( //Even thought this is taking away the button from the user, it is also protected on the backout so only the designated user can delete their own posts\n              <button\n                onClick={e => deletePost(_id)}\n                type=\"button\"\n                class=\"btn btn-danger\"\n              >\n                <i class=\"fas fa-times\" />\n              </button>\n            )}\n        </Fragment>\n      )}\n    </div>\n  </div>\n);\n\nPostItem.defaultProps = {\n  showActions: true\n};\n\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  addLike: PropTypes.func.isRequired,\n  removeLike: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(\n  mapStateToProps,\n  { addLike, removeLike, deletePost }\n)(PostItem);\n\n// const PostItem = ({\n//   auth,\n//   post: { _id, text, name, avatar, user, likes, comments, date }\n// }) => (\n//   <div class=\"post bg-white p-1 my-1\">\n//     <div>\n//       <a href=\"profile.html\">\n//         <img\n//           class=\"round-img\"\n//           src=\"https://www.gravatar.com/avatar/205e460b479e2e5b48aec07710c08d50?s=200\"\n//           alt=\"\"\n//         />\n//         <h4>John Doe</h4>\n//       </a>\n//     </div>\n//     <div>\n//       <p class=\"my-1\">\n//         Lorem ipsum dolor sit amet consectetur adipisicing elit. Sint possimus\n//         corporis sunt necessitatibus! Minus nesciunt soluta suscipit nobis. Amet\n//         accusamus distinctio cupiditate blanditiis dolor? Illo perferendis\n//         eveniet cum cupiditate aliquam?\n//       </p>\n//       <p class=\"post-date\">Posted on 04/16/2019</p>\n//       <button type=\"button\" class=\"btn btn-light\">\n//         <i class=\"fas fa-thumbs-up\" />\n//         <span>4</span>\n//       </button>\n//       <button type=\"button\" class=\"btn btn-light\">\n//         <i class=\"fas fa-thumbs-down\" />\n//       </button>\n//       <a href=\"post.html\" class=\"btn btn-primary\">\n//         Discussion <span class=\"comment-count\">2</span>\n//       </a>\n//       <button type=\"button\" class=\"btn btn-danger\">\n//         <i class=\"fas fa-times\" />\n//       </button>\n//     </div>\n//   </div>\n// );\n\n// PostItem.propTypes = {\n//   post: PropTypes.object.isRequired,\n//   auth: PropTypes.object.isRequired\n// };\n\n// // uses auth's state so we can provide a button to delete a post/comment only if that post/comment belongs to that user\n// const mapStateToProps = state => ({\n//   auth: state.auth\n// });\n// export default connect(\n//   mapStateToProps,\n//   {}\n// )(PostItem);\n"]},"metadata":{},"sourceType":"module"}