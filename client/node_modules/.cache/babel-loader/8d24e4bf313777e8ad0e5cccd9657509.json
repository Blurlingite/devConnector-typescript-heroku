{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_PROFILE, UPDATE_PROFILE, PROFILE_ERROR, CLEAR_PROFILE, ACCOUNT_DELETED } from \"./types\";\nimport { truncate } from \"fs\"; // get current user's profile of whatever user that is logged in\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    // \"/api/profile/me\" comes from your backend in the route in \"routes\" folder in profile.js\n    const res = await axios.get(\"/api/profile/me\");\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  try {\n    // \"/api/profile/me\" comes from your backend in the route in \"routes\" folder in profile.js\n    const res = await axios.get(\"/api/profile\");\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create or update a profile\n// we need the formData variable we made in some other file b/c that has all the form data\n// we need the \"history\" object b/c it has a method called \"push\" that we can use to redirect to a different route ( a client side route) after submitting the form. This is how you typically redirect in an action, you can't use <Redirect> like how we do in components\n// \"edit\" is going to be used to determine if we are making a new profile or updating a new one. If we are updating, we'll set it to true, if not change it to false. It is false by default\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const res = await axios.post(\"/api/profile\", formData, config); // we use GET_PROFILE to get the profile we just made\n    // the payload's \"res.data\" is the actual info in the profile\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    }); // set an alert\n    // if there was an edit (\"?\"), say \"Profile Updated\", otherwise (\":\") say \"Profile Created\"\n\n    dispatch(setAlert(edit ? \"Profile Updated\" : \"Profile Created\", \"success\")); // if there was not an edit, but you are creating a new profile (if ur came to this action you would be) then redirect to the \"/dashboard\" endpoint, which is the dashboard page in the browser\n\n    if (!edit) {\n      history.push(\"/dashboard\");\n    }\n  } catch (err) {\n    // see auth.js in \"actions\" folder for comments\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // we made Experience use PUT requests in the backend instead of POST\n\n    const res = await axios.put(\"/api/profile/experience\", formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    }); // set an alert\n\n    dispatch(setAlert(\"Experience Added\", \"success\"));\n    history.push(\"/dashboard\");\n  } catch (err) {\n    // see auth.js in \"actions\" folder for comments\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }; // we made Education use PUT requests in the backend instead of POST\n\n    const res = await axios.put(\"/api/profile/education\", formData, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    }); // set an alert\n\n    dispatch(setAlert(\"Education Added\", \"success\"));\n    history.push(\"/dashboard\");\n  } catch (err) {\n    // see auth.js in \"actions\" folder for comments\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete experience\n// we pass in a param we named \"id\". So it will take in an ID\n\nexport const deleteExperience = id => async dispatch => {\n  try {\n    // we have to use backticks (`) instead of quotes b/c we have a path variable in the URL. That path variable is the ID of the experience (${id})\n    const res = await axios.delete(\"/api/profile/experience/\".concat(id));\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Experience Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete education\n// we pass in a param we named \"id\". So it will take in an ID\n\nexport const deleteEducation = id => async dispatch => {\n  try {\n    // we have to use backticks (`) instead of quotes b/c we have a path variable in the URL. That path variable is the ID of the experience (${id})\n    const res = await axios.delete(\"/api/profile/education/\".concat(id));\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Education Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete account & profile\n// no params needed, it will know which account to target by the JSON webtoken\n\nexport const deleteAccount = () => async dispatch => {\n  // ask for a confirmation before deleting the account\n  if (window.confirm(\"Are you sure? This can NOT be undone!\")) {\n    try {\n      // we have to use backticks (`) instead of quotes b/c we have a path variable in the URL. That path variable is the ID of the experience (${id})\n      const res = await axios.delete(\"/api/profile\"); // no payload needed\n\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert(\"Your account has been permanently deleted\"));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: err.response.statusText,\n          status: err.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/actions/profile.js"],"names":["axios","setAlert","GET_PROFILE","UPDATE_PROFILE","PROFILE_ERROR","CLEAR_PROFILE","ACCOUNT_DELETED","truncate","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getProfiles","GET_PROFILES","createProfile","formData","history","edit","config","headers","post","push","errors","forEach","error","addExperience","put","addEducation","deleteExperience","id","delete","deleteEducation","deleteAccount","window","confirm"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\n\nimport {\n  GET_PROFILE,\n  UPDATE_PROFILE,\n  PROFILE_ERROR,\n  CLEAR_PROFILE,\n  ACCOUNT_DELETED\n} from \"./types\";\nimport { truncate } from \"fs\";\n\n// get current user's profile of whatever user that is logged in\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    // \"/api/profile/me\" comes from your backend in the route in \"routes\" folder in profile.js\n    const res = await axios.get(\"/api/profile/me\");\n\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Get all profiles\n\nexport const getProfiles = () => async dispatch => {\n  try {\n    // \"/api/profile/me\" comes from your backend in the route in \"routes\" folder in profile.js\n    const res = await axios.get(\"/api/profile\");\n\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Create or update a profile\n// we need the formData variable we made in some other file b/c that has all the form data\n// we need the \"history\" object b/c it has a method called \"push\" that we can use to redirect to a different route ( a client side route) after submitting the form. This is how you typically redirect in an action, you can't use <Redirect> like how we do in components\n// \"edit\" is going to be used to determine if we are making a new profile or updating a new one. If we are updating, we'll set it to true, if not change it to false. It is false by default\nexport const createProfile = (\n  formData,\n  history,\n  edit = false\n) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    const res = await axios.post(\"/api/profile\", formData, config);\n\n    // we use GET_PROFILE to get the profile we just made\n    // the payload's \"res.data\" is the actual info in the profile\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n\n    // set an alert\n    // if there was an edit (\"?\"), say \"Profile Updated\", otherwise (\":\") say \"Profile Created\"\n    dispatch(setAlert(edit ? \"Profile Updated\" : \"Profile Created\", \"success\"));\n\n    // if there was not an edit, but you are creating a new profile (if ur came to this action you would be) then redirect to the \"/dashboard\" endpoint, which is the dashboard page in the browser\n    if (!edit) {\n      history.push(\"/dashboard\");\n    }\n  } catch (err) {\n    // see auth.js in \"actions\" folder for comments\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add Experience\n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    // we made Experience use PUT requests in the backend instead of POST\n    const res = await axios.put(\"/api/profile/experience\", formData, config);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    // set an alert\n    dispatch(setAlert(\"Experience Added\", \"success\"));\n\n    history.push(\"/dashboard\");\n  } catch (err) {\n    // see auth.js in \"actions\" folder for comments\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add Education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    // we made Education use PUT requests in the backend instead of POST\n    const res = await axios.put(\"/api/profile/education\", formData, config);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    // set an alert\n    dispatch(setAlert(\"Education Added\", \"success\"));\n\n    history.push(\"/dashboard\");\n  } catch (err) {\n    // see auth.js in \"actions\" folder for comments\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete experience\n// we pass in a param we named \"id\". So it will take in an ID\nexport const deleteExperience = id => async dispatch => {\n  try {\n    // we have to use backticks (`) instead of quotes b/c we have a path variable in the URL. That path variable is the ID of the experience (${id})\n    const res = await axios.delete(`/api/profile/experience/${id}`);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert(\"Experience Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete education\n\n// we pass in a param we named \"id\". So it will take in an ID\nexport const deleteEducation = id => async dispatch => {\n  try {\n    // we have to use backticks (`) instead of quotes b/c we have a path variable in the URL. That path variable is the ID of the experience (${id})\n    const res = await axios.delete(`/api/profile/education/${id}`);\n\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n\n    dispatch(setAlert(\"Education Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete account & profile\n\n// no params needed, it will know which account to target by the JSON webtoken\nexport const deleteAccount = () => async dispatch => {\n  // ask for a confirmation before deleting the account\n  if (window.confirm(\"Are you sure? This can NOT be undone!\")) {\n    try {\n      // we have to use backticks (`) instead of quotes b/c we have a path variable in the URL. That path variable is the ID of the experience (${id})\n      const res = await axios.delete(\"/api/profile\");\n\n      // no payload needed\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n\n      dispatch(setAlert(\"Your account has been permanently deleted\"));\n    } catch (err) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: { msg: err.response.statusText, status: err.response.status }\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}