{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/profile/Profile.js\";\n// Section 10 Lecture 56 - Starting On The Profile\n// The parent component for the View Profile page\n// bring in the state, bring in the actual profile data\n// we need to get the ID from the route (the URL)\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport ProfileTop from \"./ProfileTop\";\nimport ProfileAbout from \"./ProfileAbout\";\nimport { getProfileById } from \"../../actions/profile\"; // we pull out \"match\" from the URL. The URL has the ID and we can access it with \"match\"\n\nconst Profile = ({\n  getProfileById,\n  profile: {\n    profile,\n    loading\n  },\n  auth,\n  match\n}) => {\n  // immediately when the profile mounts, getProfileById() will get the profile\n  useEffect(() => {\n    getProfileById(match.params.id); // NOT _id maybe b/c it comes from the URL and not the online database?\n  }, [getProfileById, match.params.id]);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, profile === null || loading ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/profiles\",\n    className: \"btn btn-light\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Back To Profile\"), auth.isAuthenticated && // If you are authenticated and\n  auth.loading === false && // you are done loading and\n  // If the userId from auth (auth.user._id) is the same as the userId of the profile you are viewing (profile.user._id)\n  auth.user._id === profile.user._id && React.createElement(Link, {\n    to: \"/edit-profile\",\n    className: \"btn btn-dark\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Edit Profile\") // Show the Edit Button\n  , React.createElement(\"div\", {\n    class: \"profile-grid my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(ProfileTop, {\n    profile: profile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(ProfileAbout, {\n    profile: profile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }))));\n};\n\nProfile.propTypes = {\n  getProfileById: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile,\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {\n  getProfileById\n})(Profile);","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/profile/Profile.js"],"names":["React","Fragment","useEffect","PropTypes","Link","connect","Spinner","ProfileTop","ProfileAbout","getProfileById","Profile","profile","loading","auth","match","params","id","isAuthenticated","user","_id","propTypes","func","isRequired","mapStateToProps","state"],"mappings":";AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,SAASC,cAAT,QAA+B,uBAA/B,C,CAEA;;AACA,MAAMC,OAAO,GAAG,CAAC;AACfD,EAAAA,cADe;AAEfE,EAAAA,OAAO,EAAE;AAAEA,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAFM;AAGfC,EAAAA,IAHe;AAIfC,EAAAA;AAJe,CAAD,KAKV;AACJ;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,cAAc,CAACK,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAd,CADc,CACmB;AAClC,GAFQ,EAEN,CAACP,cAAD,EAAiBK,KAAK,CAACC,MAAN,CAAaC,EAA9B,CAFM,CAAT;AAGA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEGL,OAAO,KAAK,IAAZ,IAAoBC,OAApB,GACC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAGC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,WAAT;AAAqB,IAAA,SAAS,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAKGC,IAAI,CAACI,eAAL,IAAwB;AACzBJ,EAAAA,IAAI,CAACD,OAAL,KAAiB,KADhB,IACyB;AACxB;AACAC,EAAAA,IAAI,CAACK,IAAL,CAAUC,GAAV,KAAkBR,OAAO,CAACO,IAAR,CAAaC,GAHhC,IAIG,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,eAAT;AAAyB,IAAA,SAAS,EAAC,cAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJH,CAMW;AAXd,IAcE;AAAK,IAAA,KAAK,EAAC,mBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAER,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEA,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAdF,CALJ,CADF;AA6BD,CAvCD;;AAyCAD,OAAO,CAACU,SAAR,GAAoB;AAClBX,EAAAA,cAAc,EAAEN,SAAS,CAACkB,IAAV,CAAeC;AADb,CAApB;;AAIA,MAAMC,eAAe,GAAGC,KAAK,KAAK;AAChCb,EAAAA,OAAO,EAAEa,KAAK,CAACb,OADiB;AAEhCE,EAAAA,IAAI,EAAEW,KAAK,CAACX;AAFoB,CAAL,CAA7B;;AAIA,eAAeR,OAAO,CACpBkB,eADoB,EAEpB;AAAEd,EAAAA;AAAF,CAFoB,CAAP,CAGbC,OAHa,CAAf","sourcesContent":["// Section 10 Lecture 56 - Starting On The Profile\n// The parent component for the View Profile page\n// bring in the state, bring in the actual profile data\n// we need to get the ID from the route (the URL)\n\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../layout/Spinner\";\nimport ProfileTop from \"./ProfileTop\";\nimport ProfileAbout from \"./ProfileAbout\";\n\nimport { getProfileById } from \"../../actions/profile\";\n\n// we pull out \"match\" from the URL. The URL has the ID and we can access it with \"match\"\nconst Profile = ({\n  getProfileById,\n  profile: { profile, loading },\n  auth,\n  match\n}) => {\n  // immediately when the profile mounts, getProfileById() will get the profile\n  useEffect(() => {\n    getProfileById(match.params.id); // NOT _id maybe b/c it comes from the URL and not the online database?\n  }, [getProfileById, match.params.id]);\n  return (\n    <Fragment>\n      {/* check if profile is loaded. While loading show the spinner gif. Otherwise, show the profile */}\n      {profile === null || loading ? (\n        <Spinner />\n      ) : (\n        <Fragment>\n          <Link to=\"/profiles\" className=\"btn btn-light\">\n            Back To Profile\n          </Link>\n          {/* If the profile you are viewing is yours, show the Edit Button */}\n          {auth.isAuthenticated && // If you are authenticated and\n          auth.loading === false && // you are done loading and\n            // If the userId from auth (auth.user._id) is the same as the userId of the profile you are viewing (profile.user._id)\n            auth.user._id === profile.user._id && (\n              <Link to=\"/edit-profile\" className=\"btn btn-dark\">\n                Edit Profile\n              </Link> // Show the Edit Button\n            )}\n\n          <div class=\"profile-grid my-1\">\n            {/* The upper part of the profile. We pass in the profile data */}\n            <ProfileTop profile={profile} />\n            <ProfileAbout profile={profile} />\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nProfile.propTypes = {\n  getProfileById: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile,\n  auth: state.auth\n});\nexport default connect(\n  mapStateToProps,\n  { getProfileById }\n)(Profile);\n"]},"metadata":{},"sourceType":"module"}