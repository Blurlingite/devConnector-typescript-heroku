{"ast":null,"code":"// Section 11 Lecture 60 - Post Reducer, Action & Initial\nimport axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST } from \"./types\"; // Get posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    // the endpoint comes from your backend. The HTTP request that gets the posts\n    const res = await axios.get(\"/api/posts\");\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add like\n// we need to know which post we are adding a like to so we need to pass in \"postId\" (a param whose name we just made up here)\n\nexport const addLike = id => async dispatch => {\n  try {\n    // the endpoint comes from your backend.\n    const res = await axios.put(\"/api/posts/like/\".concat(id));\n    dispatch({\n      type: UPDATE_LIKES,\n      // \"id\" is the post's ID\n      // the data that comes back are the \"likes\" so we assign it res.data\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove like\n// we need to know which post we are adding a like to so we need to pass in \"postId\" (a param whose name we just made up here)\n\nexport const removeLike = id => async dispatch => {\n  try {\n    // the endpoint comes from your backend\n    const res = await axios.put(\"/api/posts/unlike/\".concat(id));\n    dispatch({\n      type: UPDATE_LIKES,\n      // \"id\" is the post's ID\n      // the data that comes back are the \"likes\" so we assign it res.data\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete post\n// takes in id so it knows which post to delete\n\nexport const deletePost = id => async dispatch => {\n  try {\n    // the endpoint comes from your backend\n    const res = await axios.delete(\"/api/posts/\".concat(id));\n    dispatch({\n      type: DELETE_POST,\n      // \"id\" is the post's ID\n      // the data that comes back are the \"likes\" so we assign it res.data\n      payload: id\n    });\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add post\n// takes in formData (data from a form)\n\nexport const addPost = formData => async dispatch => {\n  // need a config b/c ur sending data\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    // the endpoint comes from your backend\n    // you can use backticks even when you don't need to pass in a parameter, it's up to you. Many developers just always use backticks\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: ADD_POST,\n      // \"id\" is the post's ID\n      // the data that comes back are the \"likes\" so we assign it res.data\n      payload: res.data\n    });\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/actions/post.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","getPosts","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","id","put","likes","removeLike","deletePost","delete","addPost","formData","config","headers","post","ADD_POST"],"mappings":"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","sourcesContent":["// Section 11 Lecture 60 - Post Reducer, Action & Initial\nimport axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST } from \"./types\";\n\n// Get posts\nexport const getPosts = () => async dispatch => {\n  try {\n    // the endpoint comes from your backend. The HTTP request that gets the posts\n    const res = await axios.get(\"/api/posts\");\n\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add like\n// we need to know which post we are adding a like to so we need to pass in \"postId\" (a param whose name we just made up here)\nexport const addLike = id => async dispatch => {\n  try {\n    // the endpoint comes from your backend.\n    const res = await axios.put(`/api/posts/like/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      // \"id\" is the post's ID\n      // the data that comes back are the \"likes\" so we assign it res.data\n      payload: { id, likes: res.data }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Remove like\n// we need to know which post we are adding a like to so we need to pass in \"postId\" (a param whose name we just made up here)\nexport const removeLike = id => async dispatch => {\n  try {\n    // the endpoint comes from your backend\n    const res = await axios.put(`/api/posts/unlike/${id}`);\n\n    dispatch({\n      type: UPDATE_LIKES,\n      // \"id\" is the post's ID\n      // the data that comes back are the \"likes\" so we assign it res.data\n      payload: { id, likes: res.data }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Delete post\n// takes in id so it knows which post to delete\nexport const deletePost = id => async dispatch => {\n  try {\n    // the endpoint comes from your backend\n    const res = await axios.delete(`/api/posts/${id}`);\n\n    dispatch({\n      type: DELETE_POST,\n      // \"id\" is the post's ID\n      // the data that comes back are the \"likes\" so we assign it res.data\n      payload: id\n    });\n\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n\n// Add post\n// takes in formData (data from a form)\nexport const addPost = formData => async dispatch => {\n  // need a config b/c ur sending data\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    // the endpoint comes from your backend\n    // you can use backticks even when you don't need to pass in a parameter, it's up to you. Many developers just always use backticks\n    const res = await axios.post(`/api/posts`, formData, config);\n\n    dispatch({\n      type: ADD_POST,\n      // \"id\" is the post's ID\n      // the data that comes back are the \"likes\" so we assign it res.data\n      payload: res.data\n    });\n\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: { msg: err.response.statusText, status: err.response.status }\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}