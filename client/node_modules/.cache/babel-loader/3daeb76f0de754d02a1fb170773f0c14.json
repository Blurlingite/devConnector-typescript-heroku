{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/dashboard/Dashboard.js\";\n// Section 9 Lecture 44\nimport React, { Fragment, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\"; // Spinner component that will be used to show a spinner when profile cannot be loaded\n\nimport Spinner from \"../layout/Spinner\";\nimport DashboardActions from \"./DashboardActions\";\nimport Experience from \"./Experience\";\nimport Education from \"./Education\";\nimport { getCurrentProfile } from \"../../actions/profile\"; // pull out \"profile\" (state of profile) and \"loading\" from \"profile\" being passed in\n\nconst Dashboard = ({\n  getCurrentProfile,\n  auth: {\n    user\n  },\n  profile: {\n    profile,\n    loading\n  }\n}) => {\n  // we want to call getCurrentProfile as soon as this component loads\n  useEffect(() => {\n    getCurrentProfile();\n  }, []); // profile is null and is still loading, show the spinner gif\n\n  return loading && profile === null ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Dashboard\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-user\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), \"Welcome \", user && user.name), profile !== null ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(DashboardActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(Experience, {\n    experience: profile.experience,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"You have not yet setup a profile, please add some info\"), React.createElement(Link, {\n    to: \"/create-profile\",\n    className: \"btn btn-primary my-1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Create Profile\")));\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getCurrentProfile\n})(Dashboard);","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/dashboard/Dashboard.js"],"names":["React","Fragment","useEffect","Link","PropTypes","connect","Spinner","DashboardActions","Experience","Education","getCurrentProfile","Dashboard","auth","user","profile","loading","name","experience","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AAEA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,iBAAT,QAAkC,uBAAlC,C,CAEA;;AACA,MAAMC,SAAS,GAAG,CAAC;AACjBD,EAAAA,iBADiB;AAEjBE,EAAAA,IAAI,EAAE;AAAEC,IAAAA;AAAF,GAFW;AAGjBC,EAAAA,OAAO,EAAE;AAAEA,IAAAA,OAAF;AAAWC,IAAAA;AAAX;AAHQ,CAAD,KAIZ;AACJ;AACAb,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT,CAFI,CAMJ;;AACA,SAAOK,OAAO,IAAID,OAAO,KAAK,IAAvB,GACL,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAGL,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,cAaWD,IAAI,IAAIA,IAAI,CAACG,IAbxB,CAFF,EAmBGF,OAAO,KAAK,IAAZ,GACC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAIE,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAEA,OAAO,CAACG,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADD,GAQC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADF,EAEE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAC,iBAAT;AAA2B,IAAA,SAAS,EAAC,sBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,CA3BJ,CAHF;AAuCD,CAlDD;;AAoDAN,SAAS,CAACO,SAAV,GAAsB;AACpBR,EAAAA,iBAAiB,EAAEN,SAAS,CAACe,IAAV,CAAeC,UADd;AAEpBR,EAAAA,IAAI,EAAER,SAAS,CAACiB,MAAV,CAAiBD,UAFH;AAGpBN,EAAAA,OAAO,EAAEV,SAAS,CAACiB,MAAV,CAAiBD;AAHN,CAAtB;;AAMA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChCX,EAAAA,IAAI,EAAEW,KAAK,CAACX,IADoB;AAEhCE,EAAAA,OAAO,EAAES,KAAK,CAACT;AAFiB,CAAL,CAA7B;;AAIA,eAAeT,OAAO,CACpBiB,eADoB,EAEpB;AAAEZ,EAAAA;AAAF,CAFoB,CAAP,CAGbC,SAHa,CAAf","sourcesContent":["// Section 9 Lecture 44\nimport React, { Fragment, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n// Spinner component that will be used to show a spinner when profile cannot be loaded\n\nimport Spinner from \"../layout/Spinner\";\nimport DashboardActions from \"./DashboardActions\";\nimport Experience from \"./Experience\";\nimport Education from \"./Education\";\n\nimport { getCurrentProfile } from \"../../actions/profile\";\n\n// pull out \"profile\" (state of profile) and \"loading\" from \"profile\" being passed in\nconst Dashboard = ({\n  getCurrentProfile,\n  auth: { user },\n  profile: { profile, loading }\n}) => {\n  // we want to call getCurrentProfile as soon as this component loads\n  useEffect(() => {\n    getCurrentProfile();\n  }, []);\n\n  // profile is null and is still loading, show the spinner gif\n  return loading && profile === null ? (\n    <Spinner />\n  ) : (\n    <Fragment>\n      <h1 className=\"large text-primary\">Dashboard</h1>\n      <p className=\"lead\">\n        <i className=\"fas fa-user\" />\n        {/* {user && user.name} does 2 things:\n      1) user will check to see if the user exists (is logged in)\n      2) user.name will display the user's name if it gets past \"user\"\n      \n      I think the reason why \"user\" check for the user is b/c it comes from the auth object that we destructured above auth: { user }\n      The auth object authorizes the user\n\n      OR it could be b/c \"user\" is an object and we aren't accessing any of it's fields like how we do with user.name\n\n      So if we don't access the fields, the program will instead check if it exists\n      */}\n        Welcome {user && user.name}\n      </p>\n\n      {/* if profile is not null use \"has\", otherwise (:) use \"has not\" */}\n      {profile !== null ? (\n        <Fragment>\n          <DashboardActions />\n          {/* need to pass in the experience array, b/c that will be passed into and used in the Experience component(Experience.js)\n          We can get that from the profile object we passed in above */}\n          <Experience experience={profile.experience} />\n        </Fragment>\n      ) : (\n        <Fragment>\n          <p>You have not yet setup a profile, please add some info</p>\n          <Link to=\"/create-profile\" className=\"btn btn-primary my-1\">\n            Create Profile\n          </Link>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nDashboard.propTypes = {\n  getCurrentProfile: PropTypes.func.isRequired,\n  auth: PropTypes.object.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth,\n  profile: state.profile\n});\nexport default connect(\n  mapStateToProps,\n  { getCurrentProfile }\n)(Dashboard);\n"]},"metadata":{},"sourceType":"module"}