{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/src/components/posts/PostItem.tsx\";\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport { connect } from \"react-redux\";\nimport { addLike, removeLike, deletePost } from \"../../actions/post\";\nimport { bindActionCreators } from \"redux\";\n\nconst PostItem = ({\n  addLike,\n  removeLike,\n  deletePost,\n  auth,\n  post: {\n    _id,\n    text,\n    name,\n    avatar,\n    user,\n    likes,\n    comments,\n    date\n  },\n  showActions\n}) => React.createElement(\"div\", {\n  className: \"post bg-white p-1 my-1\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n}, React.createElement(Link, {\n  to: \"/profile/\".concat(user),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  className: \"round-img\",\n  src: avatar,\n  alt: \"\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}), React.createElement(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, name))), React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37\n  },\n  __self: this\n}, React.createElement(\"p\", {\n  className: \"my-1\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 38\n  },\n  __self: this\n}, text), React.createElement(\"p\", {\n  className: \"post-date\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39\n  },\n  __self: this\n}, \" \", \"Posted on \", React.createElement(Moment, {\n  format: \"YYYY/MM/DD\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 41\n  },\n  __self: this\n}, date)), showActions && React.createElement(Fragment, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, React.createElement(\"button\", {\n  onClick: e => addLike(_id),\n  type: \"button\",\n  className: \"btn btn-light\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  className: \"fas fa-thumbs-up\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 51\n  },\n  __self: this\n}), \" \", React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}, \" \", likes.length > 0 && React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 52\n  },\n  __self: this\n}, likes.length))), React.createElement(\"button\", {\n  onClick: e => removeLike(_id),\n  type: \"button\",\n  className: \"btn btn-light\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 54\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  className: \"fas fa-thumbs-down\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 59\n  },\n  __self: this\n})), React.createElement(Link, {\n  to: \"/posts/\".concat(_id),\n  className: \"btn btn-primary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 62\n  },\n  __self: this\n}, \"Discussion\", \" \", comments.length > 0 && React.createElement(\"span\", {\n  className: \"comment-count\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65\n  },\n  __self: this\n}, comments.length)), !auth.loading && user === auth.user._id && React.createElement(\"button\", {\n  onClick: e => deletePost(_id),\n  type: \"button\",\n  className: \"btn btn-danger\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 70\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  className: \"fas fa-times\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n})))));\n\nPostItem.defaultProps = {\n  showActions: true\n};\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  addLike: PropTypes.func.isRequired,\n  removeLike: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  bindActionCreators({\n    addLike,\n    removeLike,\n    deletePost\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostItem);","map":{"version":3,"sources":["/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/src/components/posts/PostItem.tsx"],"names":["React","Fragment","PropTypes","Link","Moment","connect","addLike","removeLike","deletePost","bindActionCreators","PostItem","auth","post","_id","text","name","avatar","user","likes","comments","date","showActions","e","length","loading","defaultProps","propTypes","object","isRequired","func","mapStateToProps","state","mapDispatchToProps","dispatch","ownProps"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\";\nimport { connect } from \"react-redux\";\nimport { addLike, removeLike, deletePost } from \"../../actions/post\";\nimport { Post } from \"../../types/Post\";\nimport { bindActionCreators } from \"redux\";\nimport { AppState } from \"../../store\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport { AppActions } from \"../../actions/types\";\n\ninterface PostItemProps {\n  addLike: any;\n  removeLike: any;\n  deletePost: any;\n  auth: any;\n  post: any;\n  showActions: any;\n}\n\nconst PostItem: React.FC<PostItemProps> = ({\n  addLike,\n  removeLike,\n  deletePost,\n  auth,\n  post: { _id, text, name, avatar, user, likes, comments, date },\n  showActions\n}) => (\n  <div className=\"post bg-white p-1 my-1\">\n    <div>\n      <Link to={`/profile/${user}`}>\n        <img className=\"round-img\" src={avatar} alt=\"\" />\n        <h4>{name}</h4>\n      </Link>\n    </div>\n    <div>\n      <p className=\"my-1\">{text}</p>\n      <p className=\"post-date\">\n        {\" \"}\n        Posted on <Moment format=\"YYYY/MM/DD\">{date}</Moment>\n      </p>\n\n      {showActions && (\n        <Fragment>\n          <button\n            onClick={e => addLike(_id)}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            <i className=\"fas fa-thumbs-up\" />{\" \"}\n            <span> {likes.length > 0 && <span>{likes.length}</span>}</span>\n          </button>\n          <button\n            onClick={e => removeLike(_id)}\n            type=\"button\"\n            className=\"btn btn-light\"\n          >\n            <i className=\"fas fa-thumbs-down\" />\n          </button>\n\n          <Link to={`/posts/${_id}`} className=\"btn btn-primary\">\n            Discussion{\" \"}\n            {comments.length > 0 && (\n              <span className=\"comment-count\">{comments.length}</span>\n            )}\n          </Link>\n\n          {!auth.loading && user === auth.user._id && (\n            <button\n              onClick={e => deletePost(_id)}\n              type=\"button\"\n              className=\"btn btn-danger\"\n            >\n              <i className=\"fas fa-times\" />\n            </button>\n          )}\n        </Fragment>\n      )}\n    </div>\n  </div>\n);\n\nPostItem.defaultProps = {\n  showActions: true\n};\n\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired,\n  addLike: PropTypes.func.isRequired,\n  removeLike: PropTypes.func.isRequired,\n  deletePost: PropTypes.func.isRequired\n};\n\ninterface LinkStateProps {\n  auth: any;\n}\n\ninterface LinkDispatchProps {\n  addLike: (id: string) => void;\n  removeLike: (id: string) => void;\n  deletePost: (id: string) => void;\n}\n\nconst mapStateToProps = (state: AppState): LinkStateProps => ({\n  auth: state.auth\n});\n\nconst mapDispatchToProps = (\n  dispatch: ThunkDispatch<any, any, AppActions>,\n  ownProps: PostItemProps\n) => {\n  bindActionCreators({ addLike, removeLike, deletePost }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostItem);\n"]},"metadata":{},"sourceType":"module"}