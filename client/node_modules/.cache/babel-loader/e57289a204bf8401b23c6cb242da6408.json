{"ast":null,"code":"import _objectSpread from \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// Section 11 Lecture 60 - Post Reducer, Action & Initial\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        // for each post: If the post's ID is equal to the payload's ID (b/c we sent the post's ID through the payload) that means this is the correct post that we are adding/removing a like to. If we have the correct post, return the post's state (containing that post's data) which is \"...post\"\n        // Also, we are setting the \"likes\" field of the post object to the amount of likes on the payload (payload.likes). When you like or unlike a post, that change will be in the payload.\n        posts: state.posts.map(post => post._id === payload.id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","initialState","posts","post","loading","error","state","action","type","payload","map","_id","id","likes"],"mappings":";AAAA;AACA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,kBAApD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,IAFa;AAGnBC,EAAAA,OAAO,EAAE,IAHU;AAInBC,EAAAA,KAAK,EAAE;AAJY,CAArB;AAOA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAuC;AAAA,QAC5CC,IAD4C,GAC1BD,MAD0B,CAC5CC,IAD4C;AAAA,QACtCC,OADsC,GAC1BF,MAD0B,CACtCE,OADsC;;AAGpD,UAAQD,IAAR;AACE,SAAKV,SAAL;AACE,+BACKQ,KADL;AAEEJ,QAAAA,KAAK,EAAEO,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAMF,SAAKL,UAAL;AACE,+BACKO,KADL;AAEED,QAAAA,KAAK,EAAEI,OAFT;AAGEL,QAAAA,OAAO,EAAE;AAHX;;AAMF,SAAKJ,YAAL;AACE,+BACKM,KADL;AAGE;AACA;AACAJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,GAAZ,CAAgBP,IAAI,IACzBA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACG,EAArB,qBAA+BT,IAA/B;AAAqCU,UAAAA,KAAK,EAAEJ,OAAO,CAACI;AAApD,aAA8DV,IADzD,CALT;AAQEC,QAAAA,OAAO,EAAE;AARX;;AAWF;AACE,aAAOE,KAAP;AA5BJ;AA8BD","sourcesContent":["// Section 11 Lecture 60 - Post Reducer, Action & Initial\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES } from \"../actions/types\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return {\n        ...state,\n\n        // for each post: If the post's ID is equal to the payload's ID (b/c we sent the post's ID through the payload) that means this is the correct post that we are adding/removing a like to. If we have the correct post, return the post's state (containing that post's data) which is \"...post\"\n        // Also, we are setting the \"likes\" field of the post object to the amount of likes on the payload (payload.likes). When you like or unlike a post, that change will be in the payload.\n        posts: state.posts.map(post =>\n          post._id === payload.id ? { ...post, likes: payload.likes } : post\n        ),\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}