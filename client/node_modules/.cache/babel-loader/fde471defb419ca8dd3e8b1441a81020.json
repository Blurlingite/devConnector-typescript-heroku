{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { ActionTypes } from \"./types\";\n// export const getPosts = (): ThunkAction<\n//   Promise<void>,\n//   {},\n//   {},\n//   AnyAction\n// > => async dispatch => {\n//   try {\n//     const res = await axios.get(\"/api/posts\");\n//     dispatch({\n//       type: ActionTypes.GET_POSTS,\n//       posts: res.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: ActionTypes.POST_ERROR,\n//       msg: err.response.statusText,\n//       status: err.response.status\n//     });\n//   }\n// };\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/like/\".concat(id));\n    dispatch({\n      type: ActionTypes.UPDATE_LIKES,\n      id: id,\n      likes: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/unlike/\".concat(id));\n    dispatch({\n      type: ActionTypes.UPDATE_LIKES,\n      id: id,\n      likes: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(\"/api/posts/\".concat(id));\n    dispatch({\n      type: ActionTypes.DELETE_POST,\n      id: id\n    });\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts\", formData, config);\n    dispatch({\n      type: ActionTypes.ADD_POST,\n      post: res.data\n    });\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts/\".concat(id));\n    dispatch({\n      type: ActionTypes.GET_POST,\n      post: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts/comment/\".concat(postId), formData, config);\n    dispatch({\n      type: ActionTypes.ADD_COMMENT,\n      comment: res.data\n    });\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    const res = await axios.delete(\"/api/posts/comment/\".concat(postId, \"/\").concat(commentId));\n    dispatch({\n      type: ActionTypes.REMOVE_COMMENT,\n      id: commentId\n    });\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};","map":{"version":3,"sources":["/Users/vishnukdawah/Desktop/devConnector-typescript-heroku/client/src/actions/post.ts"],"names":["axios","setAlert","ActionTypes","addLike","id","dispatch","res","put","type","UPDATE_LIKES","likes","data","err","POST_ERROR","msg","response","statusText","status","removeLike","deletePost","delete","DELETE_POST","addPost","formData","config","headers","post","ADD_POST","getPost","get","GET_POST","addComment","postId","ADD_COMMENT","comment","deleteComment","commentId","REMOVE_COMMENT"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport { ActionTypes } from \"./types\";\nimport { AnyAction } from \"redux\";\nimport { ThunkAction } from \"redux-thunk\";\n\n// export const getPosts = (): ThunkAction<\n//   Promise<void>,\n//   {},\n//   {},\n//   AnyAction\n// > => async dispatch => {\n//   try {\n//     const res = await axios.get(\"/api/posts\");\n\n//     dispatch({\n//       type: ActionTypes.GET_POSTS,\n//       posts: res.data\n//     });\n//   } catch (err) {\n//     dispatch({\n//       type: ActionTypes.POST_ERROR,\n//       msg: err.response.statusText,\n//       status: err.response.status\n//     });\n//   }\n// };\n\nexport const addLike = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/like/${id}`);\n\n    dispatch({\n      type: ActionTypes.UPDATE_LIKES,\n      id: id,\n      likes: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const removeLike = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlike/${id}`);\n\n    dispatch({\n      type: ActionTypes.UPDATE_LIKES,\n      id: id,\n      likes: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const deletePost = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    await axios.delete(`/api/posts/${id}`);\n\n    dispatch({\n      type: ActionTypes.DELETE_POST,\n      id: id\n    });\n\n    dispatch(setAlert(\"Post Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const addPost = (\n  formData: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const res = await axios.post(`/api/posts`, formData, config);\n\n    dispatch({\n      type: ActionTypes.ADD_POST,\n      post: res.data\n    });\n\n    dispatch(setAlert(\"Post Created\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const getPost = (\n  id: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n\n    dispatch({\n      type: ActionTypes.GET_POST,\n      post: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const addComment = (\n  postId: string,\n  formData: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  try {\n    const res = await axios.post(\n      `/api/posts/comment/${postId}`,\n      formData,\n      config\n    );\n\n    dispatch({\n      type: ActionTypes.ADD_COMMENT,\n      comment: res.data\n    });\n\n    dispatch(setAlert(\"Comment Added\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n\nexport const deleteComment = (\n  postId: string,\n  commentId: string\n): ThunkAction<Promise<void>, {}, {}, AnyAction> => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n    dispatch({\n      type: ActionTypes.REMOVE_COMMENT,\n      id: commentId\n    });\n\n    dispatch(setAlert(\"Comment Removed\", \"success\"));\n  } catch (err) {\n    dispatch({\n      type: ActionTypes.POST_ERROR,\n      msg: err.response.statusText,\n      status: err.response.status\n    });\n  }\n};\n"]},"metadata":{},"sourceType":"module"}