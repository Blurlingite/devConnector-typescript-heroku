{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/profiles/Profiles.js\";\n// Section 10 Lecture 54\n// as soon as this profile loads we need to call GET_PROFILE that we made in the last video and we need useEffect for that\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../layout/Spinner\";\nimport ProfileItem from \"./ProfileItem\";\nimport { getProfiles } from \"../../actions/profile\";\nimport { connect } from \"react-redux\"; // we want profiles and loading from the profile object\n\nconst Profiles = ({\n  getProfiles,\n  profile: {\n    profiles,\n    loading\n  }\n}) => {\n  // as soon as this profile loads we need to run getProfiles()\n  // Next, we go to App.js and add code to make sure profiles get put in the state\n  useEffect(() => {\n    getProfiles();\n  }, []);\n  return (// If loading is true (if still loading), show the spinner gif (<Spinner />). Else, go through the array of profiles (from \"profiles\") and print each one to the webpage (using the <ProfileItem/> component)\n    React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }) : React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"large text-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Developers\"), React.createElement(\"p\", {\n      className: \"lead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"fab fa-connectdevelop\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }), \" Browse and connect with developers\"), React.createElement(\"div\", {\n      className: \"profiles\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, profiles.length > 0 ? profiles.map(profile => React.createElement(ProfileItem, {\n      key: profile._id,\n      profile: profile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    })) : React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"No profiles found...\"))))\n  );\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n}); // we need to get our profile state so we need mapStateToProps\n\n\nexport default connect(mapStateToProps, {\n  getProfiles\n})(Profiles);","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/profiles/Profiles.js"],"names":["React","Fragment","useEffect","PropTypes","Spinner","ProfileItem","getProfiles","connect","Profiles","profile","profiles","loading","length","map","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAAEF,EAAAA,WAAF;AAAeG,EAAAA,OAAO,EAAE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ;AAAxB,CAAD,KAAqD;AACpE;AACA;AACAT,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE;AACA,wBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGK,OAAO,GACN,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADM,GAGN,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEE;AAAG,MAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,uBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,wCAFF,EAME;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEGD,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GACCF,QAAQ,CAACG,GAAT,CAAaJ,OAAO,IAClB,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,OAAO,CAACK,GAA1B;AAA+B,MAAA,OAAO,EAAEL,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADD,GAKC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAPJ,CANF,CAJJ;AAFF;AA0BD,CAjCD;;AAmCAD,QAAQ,CAACO,SAAT,GAAqB;AACnBT,EAAAA,WAAW,EAAEH,SAAS,CAACa,IAAV,CAAeC,UADT;AAEnBR,EAAAA,OAAO,EAAEN,SAAS,CAACe,MAAV,CAAiBD;AAFP,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAChCX,EAAAA,OAAO,EAAEW,KAAK,CAACX;AADiB,CAAL,CAA7B,C,CAGA;;;AACA,eAAeF,OAAO,CACpBY,eADoB,EAEpB;AAAEb,EAAAA;AAAF,CAFoB,CAAP,CAGbE,QAHa,CAAf","sourcesContent":["// Section 10 Lecture 54\n// as soon as this profile loads we need to call GET_PROFILE that we made in the last video and we need useEffect for that\nimport React, { Fragment, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../layout/Spinner\";\nimport ProfileItem from \"./ProfileItem\";\n\nimport { getProfiles } from \"../../actions/profile\";\nimport { connect } from \"react-redux\";\n\n// we want profiles and loading from the profile object\nconst Profiles = ({ getProfiles, profile: { profiles, loading } }) => {\n  // as soon as this profile loads we need to run getProfiles()\n  // Next, we go to App.js and add code to make sure profiles get put in the state\n  useEffect(() => {\n    getProfiles();\n  }, []);\n\n  return (\n    // If loading is true (if still loading), show the spinner gif (<Spinner />). Else, go through the array of profiles (from \"profiles\") and print each one to the webpage (using the <ProfileItem/> component)\n    <Fragment>\n      {loading ? (\n        <Spinner />\n      ) : (\n        <Fragment>\n          <h1 className=\"large text-primary\">Developers</h1>\n          <p className=\"lead\">\n            <i className=\"fab fa-connectdevelop\" /> Browse and connect with\n            developers\n          </p>\n          <div className=\"profiles\">\n            {/* If the length of \"profiles\" is greater than 0 (meaning there are profiles in it), then go through the \"profiles\" array anf print each profile to the webpage. Else, say there were no profiles found */}\n            {profiles.length > 0 ? (\n              profiles.map(profile => (\n                <ProfileItem key={profile._id} profile={profile} />\n              ))\n            ) : (\n              <h4>No profiles found...</h4>\n            )}\n          </div>\n        </Fragment>\n      )}\n    </Fragment>\n  );\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n// we need to get our profile state so we need mapStateToProps\nexport default connect(\n  mapStateToProps,\n  { getProfiles }\n)(Profiles);\n"]},"metadata":{},"sourceType":"module"}