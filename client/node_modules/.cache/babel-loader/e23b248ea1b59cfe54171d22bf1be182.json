{"ast":null,"code":"var _jsxFileName = \"/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/posts/PostItem.js\";\n// Section 11 Lecture 61 - Post Item Component\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\"; // used when we add a like, remove a like, delete a post,etc\n\nimport { connect } from \"react-redux\";\n\nconst PostItem = ({\n  auth,\n  post: {\n    _id,\n    text,\n    name,\n    avatar,\n    user,\n    likes,\n    comments,\n    date\n  }\n}) => React.createElement(\"div\", {\n  class: \"post bg-white p-1 my-1\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14\n  },\n  __self: this\n}, React.createElement(\"a\", {\n  href: \"profile.html\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  class: \"round-img\",\n  src: avatar,\n  alt: \"\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}), React.createElement(\"h4\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, name))), React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}, React.createElement(\"p\", {\n  class: \"my-1\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}, text), React.createElement(\"p\", {\n  class: \"post-date\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n}, \" \", \"Posted on \", React.createElement(Moment, {\n  format: \"YYYY/MM/DD\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24\n  },\n  __self: this\n}, date)), React.createElement(\"button\", {\n  type: \"button\",\n  class: \"btn btn-light\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  class: \"fas fa-thumbs-up\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27\n  },\n  __self: this\n}), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28\n  },\n  __self: this\n}, likes.length)), React.createElement(\"button\", {\n  type: \"button\",\n  class: \"btn btn-light\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  class: \"fas fa-thumbs-down\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31\n  },\n  __self: this\n})), React.createElement(\"a\", {\n  href: \"post.html\",\n  class: \"btn btn-primary\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, \"Discussion \", React.createElement(\"span\", {\n  class: \"comment-count\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, comments.length)), !auth.loading && user === auth.user._id && React.createElement(\"button\", {\n  type: \"button\",\n  class: \"btn btn-danger\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45\n  },\n  __self: this\n}, React.createElement(\"i\", {\n  class: \"fas fa-times\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46\n  },\n  __self: this\n}))));\n\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n}; // uses auth's state so we can provide a button to delete a post/comment only if that post/comment belongs to that user\n\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\n\nexport default connect(mapStateToProps, {})(PostItem);","map":{"version":3,"sources":["/Users/vishnukdawah/Documents/github/MERN-apps/devConnector/client/src/components/posts/PostItem.js"],"names":["React","Fragment","PropTypes","Link","Moment","connect","PostItem","auth","post","_id","text","name","avatar","user","likes","comments","date","length","loading","propTypes","object","isRequired","mapStateToProps","state"],"mappings":"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","sourcesContent":["// Section 11 Lecture 61 - Post Item Component\nimport React, { Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport Moment from \"react-moment\";\n// used when we add a like, remove a like, delete a post,etc\nimport { connect } from \"react-redux\";\n\nconst PostItem = ({\n  auth,\n  post: { _id, text, name, avatar, user, likes, comments, date }\n}) => (\n  <div class=\"post bg-white p-1 my-1\">\n    <div>\n      <a href=\"profile.html\">\n        <img class=\"round-img\" src={avatar} alt=\"\" />\n        <h4>{name}</h4>\n      </a>\n    </div>\n    <div>\n      <p class=\"my-1\">{text}</p>\n      <p class=\"post-date\">\n        {\" \"}\n        Posted on <Moment format=\"YYYY/MM/DD\">{date}</Moment>\n      </p>\n      <button type=\"button\" class=\"btn btn-light\">\n        <i class=\"fas fa-thumbs-up\" />\n        <span>{likes.length}</span>\n      </button>\n      <button type=\"button\" class=\"btn btn-light\">\n        <i class=\"fas fa-thumbs-down\" />\n      </button>\n      <a href=\"post.html\" class=\"btn btn-primary\">\n        Discussion <span class=\"comment-count\">{comments.length}</span>\n      </a>\n\n      {/* only show the delete post button if the post belongs to that user. We use auth for this\n      \n      \"user\" is the post's user\n      \"auth.user._id\" is the user that is logged in\n\n      If they are equal, that means this post belongs to the user currently logged in\n      */}\n      {!auth.loading && user === auth.user._id && (\n        <button type=\"button\" class=\"btn btn-danger\">\n          <i class=\"fas fa-times\" />\n        </button>\n      )}\n    </div>\n  </div>\n);\n\nPostItem.propTypes = {\n  post: PropTypes.object.isRequired,\n  auth: PropTypes.object.isRequired\n};\n\n// uses auth's state so we can provide a button to delete a post/comment only if that post/comment belongs to that user\nconst mapStateToProps = state => ({\n  auth: state.auth\n});\nexport default connect(\n  mapStateToProps,\n  {}\n)(PostItem);\n"]},"metadata":{},"sourceType":"module"}