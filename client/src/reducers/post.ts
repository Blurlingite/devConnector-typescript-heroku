import {
  GET_POSTS,
  POST_ERROR,
  UPDATE_LIKES,
  DELETE_POST,
  ADD_POST,
  GET_POST,
  ADD_COMMENT,
  REMOVE_COMMENT
} from "../actions/types";
import { PostActionTypes } from "../actions/types";
import { Post } from "../types/Post";

const initialState = {
  posts: [],
  post: {
    user: null,
    text: "string",
    name: "string",
    avatar: "string",
    likes: [
      {
        user: null
      }
    ],
    comments: [
      {
        _id: "string",
        user: null,
        text: "string",
        name: "string",
        avatar: "string",
        date: Date
      }
    ],
    date: Date
  },
  loading: true,
  error: {}
};

export default function(state = initialState, action: PostActionTypes) {
  const { type, payload } = action;

  switch (type) {
    case GET_POSTS:
      return {
        ...state,
        posts: payload,
        loading: false
      };

    case GET_POST:
      return {
        ...state,
        post: payload,
        loading: false
      };

    case ADD_POST:
      return {
        ...state,
        posts: [payload, ...state.posts],
        loading: false
      };

    case DELETE_POST:
      return {
        ...state,
        // post is of type "any" b/c the "_id" is randomly generated by the NoSQL database. It is not a field in my Post object
        posts: state.posts.filter((post: any) => post._id !== payload),
        loading: false
      };

    case POST_ERROR:
      return {
        ...state,
        error: payload,
        loading: false
      };

    case UPDATE_LIKES:
      return {
        ...state,
        // post is of type "any" b/c the "_id" is randomly generated by the NoSQL database. It is not a field in my Post object
        posts: state.posts.map((post: any) =>
          post._id === payload.id ? { ...post, likes: payload.likes } : post
        ),
        loading: false
      };

    case ADD_COMMENT:
      return {
        ...state,
        post: { ...(<any>state.post), comments: payload },
        loading: false
      };
    case REMOVE_COMMENT:
      return {
        ...state,
        post: {
          ...(<any>state.post),
          comments: state.post.comments.filter(
            comment => comment._id !== payload
          )
        },
        loading: false
      };

    default:
      return state;
  }
}
